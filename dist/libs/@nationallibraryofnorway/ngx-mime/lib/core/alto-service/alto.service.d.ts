import { HttpClient } from '@angular/common/http';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { CanvasService } from '../canvas-service/canvas-service';
import { HighlightService } from '../highlight-service/highlight.service';
import { IiifManifestService } from '../iiif-manifest-service/iiif-manifest-service';
import { MimeViewerIntl } from '../intl';
import { MimeViewerConfig } from '../mime-viewer-config';
import { RecognizedTextMode, RecognizedTextModeChanges } from '../models';
import { Hit } from './../../core/models/hit';
import * as i0 from "@angular/core";
export declare class AltoService {
    intl: MimeViewerIntl;
    private http;
    private iiifManifestService;
    private highlightService;
    private canvasService;
    private sanitizer;
    private config;
    private altos;
    private isLoading;
    private textContentReady;
    private textError;
    private manifest;
    private subscriptions;
    private altoBuilder;
    private htmlFormatter;
    private hits;
    private _recognizedTextContentModeChanges;
    private previousRecognizedTextMode;
    constructor(intl: MimeViewerIntl, http: HttpClient, iiifManifestService: IiifManifestService, highlightService: HighlightService, canvasService: CanvasService, sanitizer: DomSanitizer);
    get onRecognizedTextContentModeChange$(): Observable<RecognizedTextModeChanges>;
    get onTextContentReady$(): Observable<void>;
    get isLoading$(): Observable<boolean>;
    get hasErrors$(): Observable<string | undefined>;
    get recognizedTextContentMode(): RecognizedTextMode;
    set recognizedTextContentMode(value: RecognizedTextMode);
    initialize(hits?: Hit[]): void;
    destroy(): void;
    setConfig(config: MimeViewerConfig): void;
    showRecognizedTextContentOnly(): void;
    showRecognizedTextContentInSplitView(): void;
    closeRecognizedTextContent(): void;
    getHtml(index: number): SafeHtml | undefined;
    clearCache(): void;
    private addAltoSource;
    private add;
    private isInCache;
    private load;
    private addToCache;
    private done;
    private error;
    private complete;
    static ɵfac: i0.ɵɵFactoryDeclaration<AltoService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AltoService>;
}
//# sourceMappingURL=alto.service.d.ts.map