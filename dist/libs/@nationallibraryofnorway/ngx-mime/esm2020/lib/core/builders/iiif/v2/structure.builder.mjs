import { Structure } from '../../../models/manifest';
import { BuilderUtils } from './builder-utils';
export class StructureBuilder {
    constructor(structures, sequences) {
        this.structures = structures;
        this.sequences = sequences;
    }
    build() {
        const structures = [];
        if (this.structures) {
            for (let i = 0; i < this.structures.length; i++) {
                const structure = this.structures[i];
                structures.push(new Structure({
                    id: BuilderUtils.extractId(structure),
                    type: BuilderUtils.extracType(structure),
                    label: structure.label,
                    canvases: structure.canvases,
                    canvasIndex: BuilderUtils.findCanvasIndex(structure.canvases, this.sequences),
                }));
            }
        }
        return structures;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9idWlsZGVycy9paWlmL3YyL3N0cnVjdHVyZS5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUFvQixVQUFpQixFQUFVLFNBQXFCO1FBQWhELGVBQVUsR0FBVixVQUFVLENBQU87UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFZO0lBQUcsQ0FBQztJQUV4RSxLQUFLO1FBQ0gsTUFBTSxVQUFVLEdBQWdCLEVBQUUsQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMvQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxVQUFVLENBQUMsSUFBSSxDQUNiLElBQUksU0FBUyxDQUFDO29CQUNaLEVBQUUsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztvQkFDckMsSUFBSSxFQUFFLFlBQVksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO29CQUN4QyxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUs7b0JBQ3RCLFFBQVEsRUFBRSxTQUFTLENBQUMsUUFBUTtvQkFDNUIsV0FBVyxFQUFFLFlBQVksQ0FBQyxlQUFlLENBQ3ZDLFNBQVMsQ0FBQyxRQUFRLEVBQ2xCLElBQUksQ0FBQyxTQUFTLENBQ2Y7aUJBQ0YsQ0FBQyxDQUNILENBQUM7YUFDSDtTQUNGO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVuY2UsIFN0cnVjdHVyZSB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9tYW5pZmVzdCc7XG5pbXBvcnQgeyBCdWlsZGVyVXRpbHMgfSBmcm9tICcuL2J1aWxkZXItdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RydWN0dXJlczogYW55W10sIHByaXZhdGUgc2VxdWVuY2VzOiBTZXF1ZW5jZVtdKSB7fVxuXG4gIGJ1aWxkKCk6IFN0cnVjdHVyZVtdIHtcbiAgICBjb25zdCBzdHJ1Y3R1cmVzOiBTdHJ1Y3R1cmVbXSA9IFtdO1xuICAgIGlmICh0aGlzLnN0cnVjdHVyZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdHJ1Y3R1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdHVyZSA9IHRoaXMuc3RydWN0dXJlc1tpXTtcbiAgICAgICAgc3RydWN0dXJlcy5wdXNoKFxuICAgICAgICAgIG5ldyBTdHJ1Y3R1cmUoe1xuICAgICAgICAgICAgaWQ6IEJ1aWxkZXJVdGlscy5leHRyYWN0SWQoc3RydWN0dXJlKSxcbiAgICAgICAgICAgIHR5cGU6IEJ1aWxkZXJVdGlscy5leHRyYWNUeXBlKHN0cnVjdHVyZSksXG4gICAgICAgICAgICBsYWJlbDogc3RydWN0dXJlLmxhYmVsLFxuICAgICAgICAgICAgY2FudmFzZXM6IHN0cnVjdHVyZS5jYW52YXNlcyxcbiAgICAgICAgICAgIGNhbnZhc0luZGV4OiBCdWlsZGVyVXRpbHMuZmluZENhbnZhc0luZGV4KFxuICAgICAgICAgICAgICBzdHJ1Y3R1cmUuY2FudmFzZXMsXG4gICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VzXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHJ1Y3R1cmVzO1xuICB9XG59XG4iXX0=