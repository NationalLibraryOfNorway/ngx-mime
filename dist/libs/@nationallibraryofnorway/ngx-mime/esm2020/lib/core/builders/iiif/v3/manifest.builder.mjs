import { Manifest } from '../../../models/manifest';
import { BuilderUtils } from './builder-utils';
import { MetadataBuilder } from './metadata.builder';
import { SequenceBuilder } from './sequence.builder';
import { ServiceBuilder } from './service.builder';
import { StructureBuilder } from './structure.builder';
import { TileSourceBuilder } from './tile-source.builder';
export class ManifestBuilder {
    constructor(data) {
        this.data = data;
    }
    build() {
        const sequences = new SequenceBuilder(this.data).build();
        const manifest = new Manifest({
            context: BuilderUtils.extractContext(this.data),
            type: BuilderUtils.extracType(this.data),
            id: BuilderUtils.extractId(this.data),
            viewingDirection: BuilderUtils.extractViewingDirection(this.data),
            label: BuilderUtils.extractLanguageValue(this.data.label),
            metadata: new MetadataBuilder(this.data.metadata).build(),
            license: this.data.rights,
            logo: BuilderUtils.extractLogo(this.data.provider),
            attribution: BuilderUtils.extractLanguageValue(this.data.requiredStatement?.value),
            service: new ServiceBuilder(this.data.service).build(),
            sequences: sequences,
            structures: new StructureBuilder(this.data.structures, sequences).build(),
            tileSource: new TileSourceBuilder(this.data.items).build(),
            viewingHint: BuilderUtils.extractViewingHint(this.data.behavior),
        });
        return manifest;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3QuYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LW1pbWUvc3JjL2xpYi9jb3JlL2J1aWxkZXJzL2lpaWYvdjMvbWFuaWZlc3QuYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFZLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQW9CLElBQVM7UUFBVCxTQUFJLEdBQUosSUFBSSxDQUFLO0lBQUcsQ0FBQztJQUVqQyxLQUFLO1FBQ0gsTUFBTSxTQUFTLEdBQWUsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXJFLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDO1lBQzVCLE9BQU8sRUFBRSxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDL0MsSUFBSSxFQUFFLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QyxFQUFFLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3JDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2pFLEtBQUssRUFBRSxZQUFZLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDekQsUUFBUSxFQUFFLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ3pELE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07WUFDekIsSUFBSSxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDbEQsV0FBVyxFQUFFLFlBQVksQ0FBQyxvQkFBb0IsQ0FDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQ25DO1lBQ0QsT0FBTyxFQUFFLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ3RELFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFVBQVUsRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUN6RSxVQUFVLEVBQUUsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUMxRCxXQUFXLEVBQUUsWUFBWSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2pFLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hbmlmZXN0LCBTZXF1ZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9tYW5pZmVzdCc7XG5pbXBvcnQgeyBCdWlsZGVyVXRpbHMgfSBmcm9tICcuL2J1aWxkZXItdXRpbHMnO1xuaW1wb3J0IHsgTWV0YWRhdGFCdWlsZGVyIH0gZnJvbSAnLi9tZXRhZGF0YS5idWlsZGVyJztcbmltcG9ydCB7IFNlcXVlbmNlQnVpbGRlciB9IGZyb20gJy4vc2VxdWVuY2UuYnVpbGRlcic7XG5pbXBvcnQgeyBTZXJ2aWNlQnVpbGRlciB9IGZyb20gJy4vc2VydmljZS5idWlsZGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZUJ1aWxkZXIgfSBmcm9tICcuL3N0cnVjdHVyZS5idWlsZGVyJztcbmltcG9ydCB7IFRpbGVTb3VyY2VCdWlsZGVyIH0gZnJvbSAnLi90aWxlLXNvdXJjZS5idWlsZGVyJztcblxuZXhwb3J0IGNsYXNzIE1hbmlmZXN0QnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogYW55KSB7fVxuXG4gIGJ1aWxkKCk6IE1hbmlmZXN0IHtcbiAgICBjb25zdCBzZXF1ZW5jZXM6IFNlcXVlbmNlW10gPSBuZXcgU2VxdWVuY2VCdWlsZGVyKHRoaXMuZGF0YSkuYnVpbGQoKTtcblxuICAgIGNvbnN0IG1hbmlmZXN0ID0gbmV3IE1hbmlmZXN0KHtcbiAgICAgIGNvbnRleHQ6IEJ1aWxkZXJVdGlscy5leHRyYWN0Q29udGV4dCh0aGlzLmRhdGEpLFxuICAgICAgdHlwZTogQnVpbGRlclV0aWxzLmV4dHJhY1R5cGUodGhpcy5kYXRhKSxcbiAgICAgIGlkOiBCdWlsZGVyVXRpbHMuZXh0cmFjdElkKHRoaXMuZGF0YSksXG4gICAgICB2aWV3aW5nRGlyZWN0aW9uOiBCdWlsZGVyVXRpbHMuZXh0cmFjdFZpZXdpbmdEaXJlY3Rpb24odGhpcy5kYXRhKSxcbiAgICAgIGxhYmVsOiBCdWlsZGVyVXRpbHMuZXh0cmFjdExhbmd1YWdlVmFsdWUodGhpcy5kYXRhLmxhYmVsKSxcbiAgICAgIG1ldGFkYXRhOiBuZXcgTWV0YWRhdGFCdWlsZGVyKHRoaXMuZGF0YS5tZXRhZGF0YSkuYnVpbGQoKSxcbiAgICAgIGxpY2Vuc2U6IHRoaXMuZGF0YS5yaWdodHMsXG4gICAgICBsb2dvOiBCdWlsZGVyVXRpbHMuZXh0cmFjdExvZ28odGhpcy5kYXRhLnByb3ZpZGVyKSxcbiAgICAgIGF0dHJpYnV0aW9uOiBCdWlsZGVyVXRpbHMuZXh0cmFjdExhbmd1YWdlVmFsdWUoXG4gICAgICAgIHRoaXMuZGF0YS5yZXF1aXJlZFN0YXRlbWVudD8udmFsdWVcbiAgICAgICksXG4gICAgICBzZXJ2aWNlOiBuZXcgU2VydmljZUJ1aWxkZXIodGhpcy5kYXRhLnNlcnZpY2UpLmJ1aWxkKCksXG4gICAgICBzZXF1ZW5jZXM6IHNlcXVlbmNlcyxcbiAgICAgIHN0cnVjdHVyZXM6IG5ldyBTdHJ1Y3R1cmVCdWlsZGVyKHRoaXMuZGF0YS5zdHJ1Y3R1cmVzLCBzZXF1ZW5jZXMpLmJ1aWxkKCksXG4gICAgICB0aWxlU291cmNlOiBuZXcgVGlsZVNvdXJjZUJ1aWxkZXIodGhpcy5kYXRhLml0ZW1zKS5idWlsZCgpLFxuICAgICAgdmlld2luZ0hpbnQ6IEJ1aWxkZXJVdGlscy5leHRyYWN0Vmlld2luZ0hpbnQodGhpcy5kYXRhLmJlaGF2aW9yKSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtYW5pZmVzdDtcbiAgfVxufVxuIl19