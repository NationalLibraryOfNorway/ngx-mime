import { Canvas } from '../../../models/manifest';
import { BuilderUtils } from './builder-utils';
import { ImagesBuilder } from './images.builder';
export class CanvasBuilder {
    constructor(canvases) {
        this.canvases = canvases;
    }
    build() {
        const canvases = [];
        if (this.canvases) {
            for (let i = 0; i < this.canvases.length; i++) {
                const canvas = this.canvases[i];
                let seeAlso = [];
                if (canvas.seeAlso) {
                    seeAlso = seeAlso.concat(canvas.seeAlso);
                }
                canvases.push(new Canvas({
                    id: BuilderUtils.extractId(canvas),
                    type: BuilderUtils.extracType(canvas),
                    label: canvas.label,
                    height: canvas.height,
                    width: canvas.width,
                    images: new ImagesBuilder(canvas.items).build(),
                    altoUrl: this.extractAltoUrl(seeAlso),
                }));
            }
        }
        return canvases;
    }
    extractAltoUrl(seeAlso) {
        if (!seeAlso) {
            return undefined;
        }
        const altoService = seeAlso.find((s) => s?.format === 'application/alto+xml');
        return altoService ? BuilderUtils.extractId(altoService) : undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9idWlsZGVycy9paWlmL3YzL2NhbnZhcy5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE1BQU0sT0FBTyxhQUFhO0lBQ3hCLFlBQW9CLFFBQWU7UUFBZixhQUFRLEdBQVIsUUFBUSxDQUFPO0lBQUcsQ0FBQztJQUV2QyxLQUFLO1FBQ0gsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLElBQUksT0FBTyxHQUFVLEVBQUUsQ0FBQztnQkFFeEIsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO29CQUNsQixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzFDO2dCQUVELFFBQVEsQ0FBQyxJQUFJLENBQ1gsSUFBSSxNQUFNLENBQUM7b0JBQ1QsRUFBRSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO29CQUNsQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7b0JBQ3JDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztvQkFDbkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO29CQUNyQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7b0JBQ25CLE1BQU0sRUFBRSxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFO29CQUMvQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7aUJBQ3RDLENBQUMsQ0FDSCxDQUFDO2FBQ0g7U0FDRjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxjQUFjLENBQUMsT0FBYztRQUNuQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUM5QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sS0FBSyxzQkFBc0IsQ0FDNUMsQ0FBQztRQUNGLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDdkUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FudmFzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL21hbmlmZXN0JztcbmltcG9ydCB7IEJ1aWxkZXJVdGlscyB9IGZyb20gJy4vYnVpbGRlci11dGlscyc7XG5pbXBvcnQgeyBJbWFnZXNCdWlsZGVyIH0gZnJvbSAnLi9pbWFnZXMuYnVpbGRlcic7XG5cbmV4cG9ydCBjbGFzcyBDYW52YXNCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjYW52YXNlczogYW55W10pIHt9XG5cbiAgYnVpbGQoKTogQ2FudmFzW10ge1xuICAgIGNvbnN0IGNhbnZhc2VzOiBDYW52YXNbXSA9IFtdO1xuICAgIGlmICh0aGlzLmNhbnZhc2VzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2FudmFzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXNlc1tpXTtcbiAgICAgICAgbGV0IHNlZUFsc286IGFueVtdID0gW107XG5cbiAgICAgICAgaWYgKGNhbnZhcy5zZWVBbHNvKSB7XG4gICAgICAgICAgc2VlQWxzbyA9IHNlZUFsc28uY29uY2F0KGNhbnZhcy5zZWVBbHNvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbnZhc2VzLnB1c2goXG4gICAgICAgICAgbmV3IENhbnZhcyh7XG4gICAgICAgICAgICBpZDogQnVpbGRlclV0aWxzLmV4dHJhY3RJZChjYW52YXMpLFxuICAgICAgICAgICAgdHlwZTogQnVpbGRlclV0aWxzLmV4dHJhY1R5cGUoY2FudmFzKSxcbiAgICAgICAgICAgIGxhYmVsOiBjYW52YXMubGFiZWwsXG4gICAgICAgICAgICBoZWlnaHQ6IGNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgaW1hZ2VzOiBuZXcgSW1hZ2VzQnVpbGRlcihjYW52YXMuaXRlbXMpLmJ1aWxkKCksXG4gICAgICAgICAgICBhbHRvVXJsOiB0aGlzLmV4dHJhY3RBbHRvVXJsKHNlZUFsc28pLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW52YXNlcztcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEFsdG9Vcmwoc2VlQWxzbzogYW55W10pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICghc2VlQWxzbykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBhbHRvU2VydmljZSA9IHNlZUFsc28uZmluZChcbiAgICAgIChzKSA9PiBzPy5mb3JtYXQgPT09ICdhcHBsaWNhdGlvbi9hbHRvK3htbCdcbiAgICApO1xuICAgIHJldHVybiBhbHRvU2VydmljZSA/IEJ1aWxkZXJVdGlscy5leHRyYWN0SWQoYWx0b1NlcnZpY2UpIDogdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=