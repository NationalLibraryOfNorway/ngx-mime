export class HtmlFormatter {
    constructor(sanitizer, hits) {
        this.sanitizer = sanitizer;
        this.hits = hits;
    }
    altoToHtml(alto) {
        const page = alto.layout.page;
        let html = '';
        let textBlocks = [];
        if (page.topMargin.textBlocks) {
            textBlocks = [...textBlocks, ...page.topMargin.textBlocks];
        }
        if (page.leftMargin.textBlocks) {
            textBlocks = [...textBlocks, ...page.leftMargin.textBlocks];
        }
        if (page.printSpace.textBlocks) {
            textBlocks = [...textBlocks, ...page.printSpace.textBlocks];
        }
        if (page.bottomMargin.textBlocks) {
            textBlocks = [...textBlocks, ...page.bottomMargin.textBlocks];
        }
        textBlocks.forEach((textBlock) => {
            let words = [];
            textBlock.textLines.forEach((textLine) => {
                textLine.strings.forEach((string) => {
                    words.push(string.content);
                });
            });
            const styles = [];
            if (textBlock?.textStyle?.fontStyle === 'bold') {
                styles.push('font-weight: bold');
            }
            html += '<p';
            if (styles && styles.length > 0) {
                html += ` style="${styles.join(';')}"`;
            }
            html += `>${this.transform(words.join(' '))}<p/>`;
        });
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
    transform(html) {
        const wordBoundary = '\\b';
        if (this.hits && this.hits.length > 0) {
            for (const hit of this.hits) {
                html = this.highlight(html + ' ', wordBoundary + this.escapeSpecialCharacters(hit.match));
            }
        }
        return html.trim();
    }
    highlight(html, pattern) {
        return html.replace(new RegExp(pattern, 'gi'), (match) => `<mark>${match}</mark>`);
    }
    /*
      "escapeAndRegexMatch" "\\" Is a escape character used to escape special
      characters in the regexPattern, "$&" is a back reference to the whole match.
  
      "searchValuePattern" is a list of special characters to be escaped,
      everything inside /[ ... ] including \s (whitespace) is to be escaped.
      
      text.substr(1) removes the first character of a string if the character is ",
      this is a special case in order to highlight all words.
    */
    escapeSpecialCharacters(text) {
        const escapeAndRegexMatch = '\\$&';
        const searchValuePattern = /[-[\]{}()*"+?.,\\^$|#\s]/g;
        return text.charAt(0) === '"'
            ? text.substr(1).replace(searchValuePattern, escapeAndRegexMatch)
            : text.replace(searchValuePattern, escapeAndRegexMatch);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5mb3JtYXR0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9hbHRvLXNlcnZpY2UvaHRtbC5mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxPQUFPLGFBQWE7SUFDeEIsWUFBb0IsU0FBdUIsRUFBVSxJQUFZO1FBQTdDLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFRO0lBQUcsQ0FBQztJQUVyRSxVQUFVLENBQUMsSUFBVTtRQUNuQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUM5QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLFVBQVUsR0FBVSxFQUFFLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRTtZQUM3QixVQUFVLEdBQUcsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUQ7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFO1lBQzlCLFVBQVUsR0FBRyxDQUFDLEdBQUcsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUU7WUFDOUIsVUFBVSxHQUFHLENBQUMsR0FBRyxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRTtZQUNoQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0Q7UUFFRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFDO1lBQ3pCLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBa0IsRUFBRSxFQUFFO2dCQUNqRCxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO29CQUMxQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDN0IsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztZQUM1QixJQUFJLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxLQUFLLE1BQU0sRUFBRTtnQkFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQ2xDO1lBRUQsSUFBSSxJQUFJLElBQUksQ0FBQztZQUNiLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixJQUFJLElBQUksV0FBVyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7YUFDeEM7WUFDRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTyxTQUFTLENBQUMsSUFBWTtRQUM1QixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQzNCLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUNuQixJQUFJLEdBQUcsR0FBRyxFQUNWLFlBQVksR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO2FBQ0g7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFTyxTQUFTLENBQUMsSUFBWSxFQUFFLE9BQWU7UUFDN0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUNqQixJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQ3pCLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUN4QyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7Ozs7TUFTRTtJQUNNLHVCQUF1QixDQUFDLElBQVk7UUFDMUMsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUM7UUFDbkMsTUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztRQUN2RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztZQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUM7WUFDakUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBBbHRvLCBTdHJpbmcsIFRleHRMaW5lIH0gZnJvbSAnLi9hbHRvLm1vZGVsJztcbmltcG9ydCB7IEhpdCB9IGZyb20gJy4vLi4vLi4vY29yZS9tb2RlbHMvaGl0JztcblxuZXhwb3J0IGNsYXNzIEh0bWxGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcml2YXRlIGhpdHM/OiBIaXRbXSkge31cblxuICBhbHRvVG9IdG1sKGFsdG86IEFsdG8pOiBTYWZlSHRtbCB7XG4gICAgY29uc3QgcGFnZSA9IGFsdG8ubGF5b3V0LnBhZ2U7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBsZXQgdGV4dEJsb2NrczogYW55W10gPSBbXTtcblxuICAgIGlmIChwYWdlLnRvcE1hcmdpbi50ZXh0QmxvY2tzKSB7XG4gICAgICB0ZXh0QmxvY2tzID0gWy4uLnRleHRCbG9ja3MsIC4uLnBhZ2UudG9wTWFyZ2luLnRleHRCbG9ja3NdO1xuICAgIH1cbiAgICBpZiAocGFnZS5sZWZ0TWFyZ2luLnRleHRCbG9ja3MpIHtcbiAgICAgIHRleHRCbG9ja3MgPSBbLi4udGV4dEJsb2NrcywgLi4ucGFnZS5sZWZ0TWFyZ2luLnRleHRCbG9ja3NdO1xuICAgIH1cbiAgICBpZiAocGFnZS5wcmludFNwYWNlLnRleHRCbG9ja3MpIHtcbiAgICAgIHRleHRCbG9ja3MgPSBbLi4udGV4dEJsb2NrcywgLi4ucGFnZS5wcmludFNwYWNlLnRleHRCbG9ja3NdO1xuICAgIH1cbiAgICBpZiAocGFnZS5ib3R0b21NYXJnaW4udGV4dEJsb2Nrcykge1xuICAgICAgdGV4dEJsb2NrcyA9IFsuLi50ZXh0QmxvY2tzLCAuLi5wYWdlLmJvdHRvbU1hcmdpbi50ZXh0QmxvY2tzXTtcbiAgICB9XG5cbiAgICB0ZXh0QmxvY2tzLmZvckVhY2goKHRleHRCbG9jaykgPT4ge1xuICAgICAgbGV0IHdvcmRzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgdGV4dEJsb2NrLnRleHRMaW5lcy5mb3JFYWNoKCh0ZXh0TGluZTogVGV4dExpbmUpID0+IHtcbiAgICAgICAgdGV4dExpbmUuc3RyaW5ncy5mb3JFYWNoKChzdHJpbmc6IFN0cmluZykgPT4ge1xuICAgICAgICAgIHdvcmRzLnB1c2goc3RyaW5nLmNvbnRlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc3R5bGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgaWYgKHRleHRCbG9jaz8udGV4dFN0eWxlPy5mb250U3R5bGUgPT09ICdib2xkJykge1xuICAgICAgICBzdHlsZXMucHVzaCgnZm9udC13ZWlnaHQ6IGJvbGQnKTtcbiAgICAgIH1cblxuICAgICAgaHRtbCArPSAnPHAnO1xuICAgICAgaWYgKHN0eWxlcyAmJiBzdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBodG1sICs9IGAgc3R5bGU9XCIke3N0eWxlcy5qb2luKCc7Jyl9XCJgO1xuICAgICAgfVxuICAgICAgaHRtbCArPSBgPiR7dGhpcy50cmFuc2Zvcm0od29yZHMuam9pbignICcpKX08cC8+YDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChodG1sKTtcbiAgfVxuXG4gIHByaXZhdGUgdHJhbnNmb3JtKGh0bWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgd29yZEJvdW5kYXJ5ID0gJ1xcXFxiJztcbiAgICBpZiAodGhpcy5oaXRzICYmIHRoaXMuaGl0cy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGhpdCBvZiB0aGlzLmhpdHMpIHtcbiAgICAgICAgaHRtbCA9IHRoaXMuaGlnaGxpZ2h0KFxuICAgICAgICAgIGh0bWwgKyAnICcsXG4gICAgICAgICAgd29yZEJvdW5kYXJ5ICsgdGhpcy5lc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyhoaXQubWF0Y2gpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBodG1sLnRyaW0oKTtcbiAgfVxuXG4gIHByaXZhdGUgaGlnaGxpZ2h0KGh0bWw6IHN0cmluZywgcGF0dGVybjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKFxuICAgICAgbmV3IFJlZ0V4cChwYXR0ZXJuLCAnZ2knKSxcbiAgICAgIChtYXRjaDogYW55KSA9PiBgPG1hcms+JHttYXRjaH08L21hcms+YFxuICAgICk7XG4gIH1cblxuICAvKlxuICAgIFwiZXNjYXBlQW5kUmVnZXhNYXRjaFwiIFwiXFxcXFwiIElzIGEgZXNjYXBlIGNoYXJhY3RlciB1c2VkIHRvIGVzY2FwZSBzcGVjaWFsIFxuICAgIGNoYXJhY3RlcnMgaW4gdGhlIHJlZ2V4UGF0dGVybiwgXCIkJlwiIGlzIGEgYmFjayByZWZlcmVuY2UgdG8gdGhlIHdob2xlIG1hdGNoLlxuXG4gICAgXCJzZWFyY2hWYWx1ZVBhdHRlcm5cIiBpcyBhIGxpc3Qgb2Ygc3BlY2lhbCBjaGFyYWN0ZXJzIHRvIGJlIGVzY2FwZWQsIFxuICAgIGV2ZXJ5dGhpbmcgaW5zaWRlIC9bIC4uLiBdIGluY2x1ZGluZyBcXHMgKHdoaXRlc3BhY2UpIGlzIHRvIGJlIGVzY2FwZWQuXG4gICAgXG4gICAgdGV4dC5zdWJzdHIoMSkgcmVtb3ZlcyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nIGlmIHRoZSBjaGFyYWN0ZXIgaXMgXCIsIFxuICAgIHRoaXMgaXMgYSBzcGVjaWFsIGNhc2UgaW4gb3JkZXIgdG8gaGlnaGxpZ2h0IGFsbCB3b3Jkcy5cbiAgKi9cbiAgcHJpdmF0ZSBlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVzY2FwZUFuZFJlZ2V4TWF0Y2ggPSAnXFxcXCQmJztcbiAgICBjb25zdCBzZWFyY2hWYWx1ZVBhdHRlcm4gPSAvWy1bXFxde30oKSpcIis/LixcXFxcXiR8I1xcc10vZztcbiAgICByZXR1cm4gdGV4dC5jaGFyQXQoMCkgPT09ICdcIidcbiAgICAgID8gdGV4dC5zdWJzdHIoMSkucmVwbGFjZShzZWFyY2hWYWx1ZVBhdHRlcm4sIGVzY2FwZUFuZFJlZ2V4TWF0Y2gpXG4gICAgICA6IHRleHQucmVwbGFjZShzZWFyY2hWYWx1ZVBhdHRlcm4sIGVzY2FwZUFuZFJlZ2V4TWF0Y2gpO1xuICB9XG59XG4iXX0=