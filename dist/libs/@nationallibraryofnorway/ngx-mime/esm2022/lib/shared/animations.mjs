import { animate, state, style, transition, trigger, } from '@angular/animations';
import { ViewerOptions } from './../core/models/viewer-options';
export const slideInLeft = trigger('slideInLeft', [
    state('hide', style({
        transform: 'translate(-100%, 0)',
        display: 'none',
    })),
    state('show', style({
        transform: 'translate(0px, 0px)',
        display: 'block',
    })),
    transition('hide => show', animate(`${ViewerOptions.transitions.toolbarsEaseInTime}ms ease-out`)),
    transition('show => hide', animate(`${ViewerOptions.transitions.toolbarsEaseOutTime}ms ease-in`)),
]);
export const rotate45 = trigger('rotate45', [
    transition('closed => open', [
        style({ transform: 'rotate(-45deg)', opacity: 0 }),
        animate(`100ms`),
    ]),
    transition('open => closed', [
        style({ transform: 'rotate(45deg)', opacity: 0 }),
        animate(`100ms`),
    ]),
]);
export const easeInWithDelay = trigger('easeInWithDelay', [
    state('void', style({ transform: 'scale(0)' })),
    transition(':enter', animate(`1ms {{delayEnter}}ms ease-out`), {
        params: { delayEnter: 0 },
    }),
    transition(':leave', animate(`1ms {{delayLeave}}ms ease-in`), {
        params: { delayLeave: 0 },
    }),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LW1pbWUvc3JjL2xpYi9zaGFyZWQvYW5pbWF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUNQLEtBQUssRUFDTCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sR0FDUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsRUFBRTtJQUNoRCxLQUFLLENBQ0gsTUFBTSxFQUNOLEtBQUssQ0FBQztRQUNKLFNBQVMsRUFBRSxxQkFBcUI7UUFDaEMsT0FBTyxFQUFFLE1BQU07S0FDaEIsQ0FBQyxDQUNIO0lBQ0QsS0FBSyxDQUNILE1BQU0sRUFDTixLQUFLLENBQUM7UUFDSixTQUFTLEVBQUUscUJBQXFCO1FBQ2hDLE9BQU8sRUFBRSxPQUFPO0tBQ2pCLENBQUMsQ0FDSDtJQUNELFVBQVUsQ0FDUixjQUFjLEVBQ2QsT0FBTyxDQUFDLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsYUFBYSxDQUFDLENBQ3RFO0lBQ0QsVUFBVSxDQUNSLGNBQWMsRUFDZCxPQUFPLENBQUMsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLG1CQUFtQixZQUFZLENBQUMsQ0FDdEU7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRTtJQUMxQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUU7UUFDM0IsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNsRCxPQUFPLENBQUMsT0FBTyxDQUFDO0tBQ2pCLENBQUM7SUFDRixVQUFVLENBQUMsZ0JBQWdCLEVBQUU7UUFDM0IsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDakQsT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUNqQixDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtJQUN4RCxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDLEVBQUU7UUFDN0QsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRTtLQUMxQixDQUFDO0lBQ0YsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsOEJBQThCLENBQUMsRUFBRTtRQUM1RCxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFO0tBQzFCLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgVmlld2VyT3B0aW9ucyB9IGZyb20gJy4vLi4vY29yZS9tb2RlbHMvdmlld2VyLW9wdGlvbnMnO1xuXG5leHBvcnQgY29uc3Qgc2xpZGVJbkxlZnQgPSB0cmlnZ2VyKCdzbGlkZUluTGVmdCcsIFtcbiAgc3RhdGUoXG4gICAgJ2hpZGUnLFxuICAgIHN0eWxlKHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtMTAwJSwgMCknLFxuICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgIH0pLFxuICApLFxuICBzdGF0ZShcbiAgICAnc2hvdycsXG4gICAgc3R5bGUoe1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDBweCwgMHB4KScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIH0pLFxuICApLFxuICB0cmFuc2l0aW9uKFxuICAgICdoaWRlID0+IHNob3cnLFxuICAgIGFuaW1hdGUoYCR7Vmlld2VyT3B0aW9ucy50cmFuc2l0aW9ucy50b29sYmFyc0Vhc2VJblRpbWV9bXMgZWFzZS1vdXRgKSxcbiAgKSxcbiAgdHJhbnNpdGlvbihcbiAgICAnc2hvdyA9PiBoaWRlJyxcbiAgICBhbmltYXRlKGAke1ZpZXdlck9wdGlvbnMudHJhbnNpdGlvbnMudG9vbGJhcnNFYXNlT3V0VGltZX1tcyBlYXNlLWluYCksXG4gICksXG5dKTtcblxuZXhwb3J0IGNvbnN0IHJvdGF0ZTQ1ID0gdHJpZ2dlcigncm90YXRlNDUnLCBbXG4gIHRyYW5zaXRpb24oJ2Nsb3NlZCA9PiBvcGVuJywgW1xuICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAncm90YXRlKC00NWRlZyknLCBvcGFjaXR5OiAwIH0pLFxuICAgIGFuaW1hdGUoYDEwMG1zYCksXG4gIF0pLFxuICB0cmFuc2l0aW9uKCdvcGVuID0+IGNsb3NlZCcsIFtcbiAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknLCBvcGFjaXR5OiAwIH0pLFxuICAgIGFuaW1hdGUoYDEwMG1zYCksXG4gIF0pLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5XaXRoRGVsYXkgPSB0cmlnZ2VyKCdlYXNlSW5XaXRoRGVsYXknLCBbXG4gIHN0YXRlKCd2b2lkJywgc3R5bGUoeyB0cmFuc2Zvcm06ICdzY2FsZSgwKScgfSkpLFxuICB0cmFuc2l0aW9uKCc6ZW50ZXInLCBhbmltYXRlKGAxbXMge3tkZWxheUVudGVyfX1tcyBlYXNlLW91dGApLCB7XG4gICAgcGFyYW1zOiB7IGRlbGF5RW50ZXI6IDAgfSxcbiAgfSksXG4gIHRyYW5zaXRpb24oJzpsZWF2ZScsIGFuaW1hdGUoYDFtcyB7e2RlbGF5TGVhdmV9fW1zIGVhc2UtaW5gKSwge1xuICAgIHBhcmFtczogeyBkZWxheUxlYXZlOiAwIH0sXG4gIH0pLFxuXSk7XG4iXX0=