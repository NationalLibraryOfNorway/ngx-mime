import { Direction } from '../models/direction';
import { ViewingDirection } from '../models/viewing-direction';
export class DashboardModeCalculateNextCanvasGroupStrategy {
    calculateNextCanvasGroup(criteria) {
        const speed = criteria.speed;
        const direction = criteria.direction;
        const currentCanvasGroupIndex = criteria.currentCanvasGroupIndex;
        const currentCanvasGroupCenter = criteria.currentCanvasGroupCenter;
        let nextCanvasGroup;
        let canvasGroupDelta = this.calculateNumberOfCanvasGroupsToGo(speed);
        if (canvasGroupDelta === 0) {
            nextCanvasGroup = currentCanvasGroupCenter;
        }
        else {
            canvasGroupDelta =
                direction === Direction.LEFT ? canvasGroupDelta : canvasGroupDelta * -1;
            nextCanvasGroup =
                criteria.viewingDirection === ViewingDirection.LTR
                    ? currentCanvasGroupIndex + canvasGroupDelta
                    : currentCanvasGroupIndex - canvasGroupDelta;
        }
        return nextCanvasGroup;
    }
    calculateNumberOfCanvasGroupsToGo(speed) {
        let canvasGroupsToGo = 10;
        if (speed !== undefined) {
            if (speed < 500) {
                canvasGroupsToGo = 0;
            }
            else if (speed >= 500 && speed < 1500) {
                canvasGroupsToGo = 1;
            }
            else if (speed >= 1500 && speed < 2500) {
                canvasGroupsToGo = 3;
            }
            else if (speed >= 2500 && speed < 3500) {
                canvasGroupsToGo = 5;
            }
        }
        return canvasGroupsToGo;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLW1vZGUtY2FsY3VsYXRlLW5leHQtY2FudmFzLWdyb3VwLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbWltZS9zcmMvbGliL2NvcmUvdmlld2VyLXNlcnZpY2UvZGFzaGJvYXJkLW1vZGUtY2FsY3VsYXRlLW5leHQtY2FudmFzLWdyb3VwLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU0vRCxNQUFNLE9BQU8sNkNBQTZDO0lBR3hELHdCQUF3QixDQUFDLFFBQWlDO1FBQ3hELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDN0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUNyQyxNQUFNLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztRQUNqRSxNQUFNLHdCQUF3QixHQUFHLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztRQUVuRSxJQUFJLGVBQXVCLENBQUM7UUFDNUIsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUNBQWlDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckUsSUFBSSxnQkFBZ0IsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMzQixlQUFlLEdBQUcsd0JBQXdCLENBQUM7UUFDN0MsQ0FBQzthQUFNLENBQUM7WUFDTixnQkFBZ0I7Z0JBQ2QsU0FBUyxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxRSxlQUFlO2dCQUNiLFFBQVEsQ0FBQyxnQkFBZ0IsS0FBSyxnQkFBZ0IsQ0FBQyxHQUFHO29CQUNoRCxDQUFDLENBQUMsdUJBQXVCLEdBQUcsZ0JBQWdCO29CQUM1QyxDQUFDLENBQUMsdUJBQXVCLEdBQUcsZ0JBQWdCLENBQUM7UUFDbkQsQ0FBQztRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxpQ0FBaUMsQ0FBQyxLQUF5QjtRQUNqRSxJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN4QixJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7aUJBQU0sSUFBSSxLQUFLLElBQUksR0FBRyxJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQztnQkFDeEMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7aUJBQU0sSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQztnQkFDekMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7aUJBQU0sSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQztnQkFDekMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7UUFDSCxDQUFDO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMvZGlyZWN0aW9uJztcbmltcG9ydCB7IFZpZXdpbmdEaXJlY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMvdmlld2luZy1kaXJlY3Rpb24nO1xuaW1wb3J0IHtcbiAgQ2FsY3VsYXRlTmV4dENhbnZhc0dyb3VwU3RyYXRlZ3ksXG4gIE5leHRDYW52YXNHcm91cENyaXRlcmlhLFxufSBmcm9tICcuL2NhbGN1bGF0ZS1uZXh0LWNhbnZhcy1ncm91cC1zdHJhdGVneSc7XG5cbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRNb2RlQ2FsY3VsYXRlTmV4dENhbnZhc0dyb3VwU3RyYXRlZ3lcbiAgaW1wbGVtZW50cyBDYWxjdWxhdGVOZXh0Q2FudmFzR3JvdXBTdHJhdGVneVxue1xuICBjYWxjdWxhdGVOZXh0Q2FudmFzR3JvdXAoY3JpdGVyaWE6IE5leHRDYW52YXNHcm91cENyaXRlcmlhKTogbnVtYmVyIHtcbiAgICBjb25zdCBzcGVlZCA9IGNyaXRlcmlhLnNwZWVkO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNyaXRlcmlhLmRpcmVjdGlvbjtcbiAgICBjb25zdCBjdXJyZW50Q2FudmFzR3JvdXBJbmRleCA9IGNyaXRlcmlhLmN1cnJlbnRDYW52YXNHcm91cEluZGV4O1xuICAgIGNvbnN0IGN1cnJlbnRDYW52YXNHcm91cENlbnRlciA9IGNyaXRlcmlhLmN1cnJlbnRDYW52YXNHcm91cENlbnRlcjtcblxuICAgIGxldCBuZXh0Q2FudmFzR3JvdXA6IG51bWJlcjtcbiAgICBsZXQgY2FudmFzR3JvdXBEZWx0YSA9IHRoaXMuY2FsY3VsYXRlTnVtYmVyT2ZDYW52YXNHcm91cHNUb0dvKHNwZWVkKTtcbiAgICBpZiAoY2FudmFzR3JvdXBEZWx0YSA9PT0gMCkge1xuICAgICAgbmV4dENhbnZhc0dyb3VwID0gY3VycmVudENhbnZhc0dyb3VwQ2VudGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYW52YXNHcm91cERlbHRhID1cbiAgICAgICAgZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTEVGVCA/IGNhbnZhc0dyb3VwRGVsdGEgOiBjYW52YXNHcm91cERlbHRhICogLTE7XG4gICAgICBuZXh0Q2FudmFzR3JvdXAgPVxuICAgICAgICBjcml0ZXJpYS52aWV3aW5nRGlyZWN0aW9uID09PSBWaWV3aW5nRGlyZWN0aW9uLkxUUlxuICAgICAgICAgID8gY3VycmVudENhbnZhc0dyb3VwSW5kZXggKyBjYW52YXNHcm91cERlbHRhXG4gICAgICAgICAgOiBjdXJyZW50Q2FudmFzR3JvdXBJbmRleCAtIGNhbnZhc0dyb3VwRGVsdGE7XG4gICAgfVxuICAgIHJldHVybiBuZXh0Q2FudmFzR3JvdXA7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZU51bWJlck9mQ2FudmFzR3JvdXBzVG9HbyhzcGVlZDogbnVtYmVyIHwgdW5kZWZpbmVkKTogbnVtYmVyIHtcbiAgICBsZXQgY2FudmFzR3JvdXBzVG9HbyA9IDEwO1xuICAgIGlmIChzcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoc3BlZWQgPCA1MDApIHtcbiAgICAgICAgY2FudmFzR3JvdXBzVG9HbyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNwZWVkID49IDUwMCAmJiBzcGVlZCA8IDE1MDApIHtcbiAgICAgICAgY2FudmFzR3JvdXBzVG9HbyA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHNwZWVkID49IDE1MDAgJiYgc3BlZWQgPCAyNTAwKSB7XG4gICAgICAgIGNhbnZhc0dyb3Vwc1RvR28gPSAzO1xuICAgICAgfSBlbHNlIGlmIChzcGVlZCA+PSAyNTAwICYmIHNwZWVkIDwgMzUwMCkge1xuICAgICAgICBjYW52YXNHcm91cHNUb0dvID0gNTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhc0dyb3Vwc1RvR287XG4gIH1cbn1cbiJdfQ==