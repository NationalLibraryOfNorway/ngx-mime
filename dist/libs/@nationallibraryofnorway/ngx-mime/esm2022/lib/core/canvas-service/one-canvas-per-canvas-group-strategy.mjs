import { OnePageCalculatePagePositionStrategy } from '../canvas-group-position/one-page-calculate-page-position-strategy';
import { CanvasGroups } from '../models/canvas-groups';
import { Rect } from '../models/rect';
export class OneCanvasPerCanvasGroupStrategy {
    constructor(config, viewingDirection, rotation) {
        this.config = config;
        this.viewingDirection = viewingDirection;
        this.rotation = rotation;
        this.positionStrategy = new OnePageCalculatePagePositionStrategy(this.config);
    }
    addAll(tileSources) {
        const canvasGroups = new CanvasGroups();
        tileSources.forEach((tileSource, index) => {
            const previousCanvasGroup = this.getPreviousCanvasGroup(canvasGroups, index);
            const position = this.calculatePosition(tileSource, index, previousCanvasGroup);
            const newCanvasGroup = this.createCanvasGroup(tileSource, position);
            canvasGroups.add(newCanvasGroup);
            canvasGroups.canvasesPerCanvasGroup.push([index]);
        });
        return canvasGroups;
    }
    getPreviousCanvasGroup(canvasGroups, index) {
        return index === 0
            ? undefined
            : canvasGroups.canvasGroups[canvasGroups.canvasGroups.length - 1];
    }
    calculatePosition(tileSource, index, previousCanvasGroup) {
        return this.positionStrategy.calculateCanvasGroupPosition({
            canvasGroupIndex: index,
            canvasSource: tileSource,
            previousCanvasGroupPosition: previousCanvasGroup
                ? previousCanvasGroup.rect
                : new Rect(),
            viewingDirection: this.viewingDirection,
        }, this.rotation);
    }
    createCanvasGroup(tileSource, position) {
        const tileSourceAndRect = { tileSource, rect: position };
        return { tileSourceAndRects: [tileSourceAndRect], rect: position };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25lLWNhbnZhcy1wZXItY2FudmFzLWdyb3VwLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbWltZS9zcmMvbGliL2NvcmUvY2FudmFzLXNlcnZpY2Uvb25lLWNhbnZhcy1wZXItY2FudmFzLWdyb3VwLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBRTFILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLdEMsTUFBTSxPQUFPLCtCQUErQjtJQUsxQyxZQUNVLE1BQXdCLEVBQ3hCLGdCQUFrQyxFQUNsQyxRQUFnQjtRQUZoQixXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQUN4QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVE7UUFFeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksb0NBQW9DLENBQzlELElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBK0I7UUFDcEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4QyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3hDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUNyRCxZQUFZLEVBQ1osS0FBSyxDQUNOLENBQUM7WUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQ3JDLFVBQVUsRUFDVixLQUFLLEVBQ0wsbUJBQW1CLENBQ3BCLENBQUM7WUFDRixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRXBFLFlBQVksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDakMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRU8sc0JBQXNCLENBQzVCLFlBQTBCLEVBQzFCLEtBQWE7UUFFYixPQUFPLEtBQUssS0FBSyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxTQUFTO1lBQ1gsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVPLGlCQUFpQixDQUN2QixVQUFlLEVBQ2YsS0FBYSxFQUNiLG1CQUFpQztRQUVqQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FDdkQ7WUFDRSxnQkFBZ0IsRUFBRSxLQUFLO1lBQ3ZCLFlBQVksRUFBRSxVQUFVO1lBQ3hCLDJCQUEyQixFQUFFLG1CQUFtQjtnQkFDOUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQUk7Z0JBQzFCLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtZQUNkLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDeEMsRUFDRCxJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7SUFDSixDQUFDO0lBRU8saUJBQWlCLENBQUMsVUFBZSxFQUFFLFFBQWM7UUFDdkQsTUFBTSxpQkFBaUIsR0FBc0IsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQzVFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ3JFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uZVBhZ2VDYWxjdWxhdGVQYWdlUG9zaXRpb25TdHJhdGVneSB9IGZyb20gJy4uL2NhbnZhcy1ncm91cC1wb3NpdGlvbi9vbmUtcGFnZS1jYWxjdWxhdGUtcGFnZS1wb3NpdGlvbi1zdHJhdGVneSc7XG5pbXBvcnQgeyBNaW1lVmlld2VyQ29uZmlnIH0gZnJvbSAnLi4vbWltZS12aWV3ZXItY29uZmlnJztcbmltcG9ydCB7IENhbnZhc0dyb3VwcyB9IGZyb20gJy4uL21vZGVscy9jYW52YXMtZ3JvdXBzJztcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuLi9tb2RlbHMvcmVjdCc7XG5pbXBvcnQgeyBWaWV3aW5nRGlyZWN0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL3ZpZXdpbmctZGlyZWN0aW9uJztcbmltcG9ydCB7IEFic3RyYWN0Q2FudmFzR3JvdXBTdHJhdGVneSB9IGZyb20gJy4vY2FudmFzLWdyb3VwLnN0cmF0ZWd5JztcbmltcG9ydCB7IENhbnZhc0dyb3VwLCBUaWxlU291cmNlQW5kUmVjdCB9IGZyb20gJy4vdGlsZS1zb3VyY2UtYW5kLXJlY3QubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgT25lQ2FudmFzUGVyQ2FudmFzR3JvdXBTdHJhdGVneVxuICBpbXBsZW1lbnRzIEFic3RyYWN0Q2FudmFzR3JvdXBTdHJhdGVneVxue1xuICBwcml2YXRlIHBvc2l0aW9uU3RyYXRlZ3k6IE9uZVBhZ2VDYWxjdWxhdGVQYWdlUG9zaXRpb25TdHJhdGVneTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbmZpZzogTWltZVZpZXdlckNvbmZpZyxcbiAgICBwcml2YXRlIHZpZXdpbmdEaXJlY3Rpb246IFZpZXdpbmdEaXJlY3Rpb24sXG4gICAgcHJpdmF0ZSByb3RhdGlvbjogbnVtYmVyLFxuICApIHtcbiAgICB0aGlzLnBvc2l0aW9uU3RyYXRlZ3kgPSBuZXcgT25lUGFnZUNhbGN1bGF0ZVBhZ2VQb3NpdGlvblN0cmF0ZWd5KFxuICAgICAgdGhpcy5jb25maWcsXG4gICAgKTtcbiAgfVxuXG4gIGFkZEFsbCh0aWxlU291cmNlczogUmVhZG9ubHlBcnJheTxhbnk+KTogQ2FudmFzR3JvdXBzIHtcbiAgICBjb25zdCBjYW52YXNHcm91cHMgPSBuZXcgQ2FudmFzR3JvdXBzKCk7XG5cbiAgICB0aWxlU291cmNlcy5mb3JFYWNoKCh0aWxlU291cmNlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcHJldmlvdXNDYW52YXNHcm91cCA9IHRoaXMuZ2V0UHJldmlvdXNDYW52YXNHcm91cChcbiAgICAgICAgY2FudmFzR3JvdXBzLFxuICAgICAgICBpbmRleCxcbiAgICAgICk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuY2FsY3VsYXRlUG9zaXRpb24oXG4gICAgICAgIHRpbGVTb3VyY2UsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBwcmV2aW91c0NhbnZhc0dyb3VwLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IG5ld0NhbnZhc0dyb3VwID0gdGhpcy5jcmVhdGVDYW52YXNHcm91cCh0aWxlU291cmNlLCBwb3NpdGlvbik7XG5cbiAgICAgIGNhbnZhc0dyb3Vwcy5hZGQobmV3Q2FudmFzR3JvdXApO1xuICAgICAgY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAucHVzaChbaW5kZXhdKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjYW52YXNHcm91cHM7XG4gIH1cblxuICBwcml2YXRlIGdldFByZXZpb3VzQ2FudmFzR3JvdXAoXG4gICAgY2FudmFzR3JvdXBzOiBDYW52YXNHcm91cHMsXG4gICAgaW5kZXg6IG51bWJlcixcbiAgKTogQ2FudmFzR3JvdXAgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBpbmRleCA9PT0gMFxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogY2FudmFzR3JvdXBzLmNhbnZhc0dyb3Vwc1tjYW52YXNHcm91cHMuY2FudmFzR3JvdXBzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVQb3NpdGlvbihcbiAgICB0aWxlU291cmNlOiBhbnksXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBwcmV2aW91c0NhbnZhc0dyb3VwPzogQ2FudmFzR3JvdXAsXG4gICk6IFJlY3Qge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uU3RyYXRlZ3kuY2FsY3VsYXRlQ2FudmFzR3JvdXBQb3NpdGlvbihcbiAgICAgIHtcbiAgICAgICAgY2FudmFzR3JvdXBJbmRleDogaW5kZXgsXG4gICAgICAgIGNhbnZhc1NvdXJjZTogdGlsZVNvdXJjZSxcbiAgICAgICAgcHJldmlvdXNDYW52YXNHcm91cFBvc2l0aW9uOiBwcmV2aW91c0NhbnZhc0dyb3VwXG4gICAgICAgICAgPyBwcmV2aW91c0NhbnZhc0dyb3VwLnJlY3RcbiAgICAgICAgICA6IG5ldyBSZWN0KCksXG4gICAgICAgIHZpZXdpbmdEaXJlY3Rpb246IHRoaXMudmlld2luZ0RpcmVjdGlvbixcbiAgICAgIH0sXG4gICAgICB0aGlzLnJvdGF0aW9uLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUNhbnZhc0dyb3VwKHRpbGVTb3VyY2U6IGFueSwgcG9zaXRpb246IFJlY3QpOiBDYW52YXNHcm91cCB7XG4gICAgY29uc3QgdGlsZVNvdXJjZUFuZFJlY3Q6IFRpbGVTb3VyY2VBbmRSZWN0ID0geyB0aWxlU291cmNlLCByZWN0OiBwb3NpdGlvbiB9O1xuICAgIHJldHVybiB7IHRpbGVTb3VyY2VBbmRSZWN0czogW3RpbGVTb3VyY2VBbmRSZWN0XSwgcmVjdDogcG9zaXRpb24gfTtcbiAgfVxufVxuIl19