import { Injectable } from '@angular/core';
import * as OpenSeadragon from 'openseadragon';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { MimeViewerConfig } from '../mime-viewer-config';
import { ViewerLayout } from '../models/viewer-layout';
import { ViewingDirection } from '../models/viewing-direction';
import { ViewerLayoutService } from '../viewer-layout-service/viewer-layout-service';
import { TileSourceStrategyFactory } from '../viewer-service/tile-source-strategy-factory';
import { CanvasGroups } from './../models/canvas-groups';
import { CanvasGroupStrategyFactory } from './canvas-groups-strategy.factory';
import * as i0 from "@angular/core";
import * as i1 from "../viewer-layout-service/viewer-layout-service";
export class CanvasService {
    constructor(viewerLayoutService) {
        this.viewerLayoutService = viewerLayoutService;
        this._currentNumberOfCanvasGroups = new BehaviorSubject(0);
        this._currentCanvasGroupIndex = new BehaviorSubject(0);
        this.canvasGroups = new CanvasGroups();
        this._numberOfCanvases = 0;
        this.config = new MimeViewerConfig();
        this.tileSources = [];
        this.viewer = undefined;
        this.rotation = 0;
        this.viewingDirection = ViewingDirection.LTR;
        this._overlays = [];
    }
    get overlays() {
        return this._overlays;
    }
    get onCanvasGroupIndexChange() {
        return this._currentCanvasGroupIndex
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    get onNumberOfCanvasGroupsChange() {
        return this._currentNumberOfCanvasGroups
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    set currentCanvasGroupIndex(currentCanvasGroupIndex) {
        if (!this.isWithinBounds(currentCanvasGroupIndex)) {
            return;
        }
        this._currentCanvasGroupIndex.next(currentCanvasGroupIndex);
    }
    get currentCanvasGroupIndex() {
        return this._currentCanvasGroupIndex.value;
    }
    get numberOfCanvases() {
        return this._numberOfCanvases;
    }
    set numberOfCanvases(numberOfCanvases) {
        this._numberOfCanvases = numberOfCanvases;
    }
    get numberOfCanvasGroups() {
        return this.canvasGroups.length();
    }
    get currentCanvasIndex() {
        const canvases = this.canvasGroups.canvasesPerCanvasGroup[this.currentCanvasGroupIndex];
        return canvases && canvases.length >= 1 ? canvases[0] : 0;
    }
    setViewer(viewer) {
        this.viewer = viewer;
    }
    setConfig(config) {
        this.config = config;
    }
    setSvgNode(svgNode) {
        this.svgNode = svgNode;
    }
    setRotation(rotation) {
        this.rotation = rotation;
    }
    setViewingDirection(viewingDirection) {
        this.viewingDirection = viewingDirection;
    }
    addTileSources(tileSources) {
        this.tileSources = tileSources;
    }
    updateViewer() {
        this.createCanvasGroups();
        this.createAndAppendCanvasGroups();
    }
    isWithinBounds(canvasGroupIndex) {
        return (canvasGroupIndex > -1 && canvasGroupIndex <= this.numberOfCanvasGroups - 1);
    }
    isCurrentCanvasGroupValid() {
        return this.isWithinBounds(this.currentCanvasGroupIndex);
    }
    // Returns -1 if next canvas index is out of bounds
    getNextCanvasGroupIndex() {
        if (!this.isWithinBounds(this.currentCanvasGroupIndex + 1)) {
            return -1;
        }
        this.currentCanvasGroupIndex++;
        return this.currentCanvasGroupIndex;
    }
    // Returns -1 if previous canvas index is out of bounds
    getPrevCanvasGroupIndex() {
        if (!this.isWithinBounds(this.currentCanvasGroupIndex - 1)) {
            return -1;
        }
        this.currentCanvasGroupIndex--;
        return this.currentCanvasGroupIndex;
    }
    constrainToRange(canvasGroupsIndex) {
        if (canvasGroupsIndex < 0) {
            return 0;
        }
        else if (canvasGroupsIndex >= this.numberOfCanvasGroups - 1) {
            return this.numberOfCanvasGroups - 1;
        }
        else {
            return canvasGroupsIndex;
        }
    }
    findClosestCanvasGroupIndex(point) {
        return this.canvasGroups.findClosestIndex(point);
    }
    findCanvasGroupByCanvasIndex(canvasIndex) {
        return this.canvasGroups.canvasesPerCanvasGroup.findIndex(function (canvasForCanvasGroup) {
            return canvasForCanvasGroup.indexOf(canvasIndex) >= 0;
        });
    }
    findCanvasByCanvasIndex(canvasIndex) {
        return this.canvasGroups.canvasesPerCanvasGroup.length === 0
            ? -1
            : this.canvasGroups.canvasesPerCanvasGroup[canvasIndex][0];
    }
    getCanvasGroupLabel(canvasGroupIndex) {
        if (!this.canvasGroups.canvasGroups ||
            this.canvasGroups.canvasesPerCanvasGroup.length === 0) {
            return '1';
        }
        const canvasGroup = this.canvasGroups.canvasesPerCanvasGroup[canvasGroupIndex];
        let canvasGroupLabel = '' + (canvasGroup[0] + 1);
        if (canvasGroup.length > 1) {
            canvasGroupLabel =
                canvasGroupLabel + '-' + (canvasGroup[canvasGroup.length - 1] + 1);
        }
        return canvasGroupLabel;
    }
    getCanvasesPerCanvasGroup(canvasIndex) {
        return !this.canvasGroups.canvasGroups
            ? [0]
            : this.canvasGroups.canvasesPerCanvasGroup[canvasIndex];
    }
    getCanvasRect(canvasIndex) {
        return this.canvasGroups.tileSourceAndRects[canvasIndex].rect;
    }
    getCurrentCanvasGroupRect() {
        return this.getCanvasGroupRect(this.currentCanvasGroupIndex);
    }
    getCanvasGroupRect(canvasGroupIndex) {
        return this.canvasGroups.get(canvasGroupIndex).rect;
    }
    reset() {
        this.viewer = undefined;
        this._overlays = [];
        this.numberOfCanvases = 0;
        this._currentCanvasGroupIndex.next(0);
        this.canvasGroups = new CanvasGroups();
    }
    createTile(tile) {
        const position = tile.rect;
        const rotated = this.rotation === 90 || this.rotation === 270;
        let bounds;
        /* Because image scaling is performed before rotation,
         * we must invert width & height and translate position so that tile rotation ends up correct
         */
        if (rotated) {
            bounds = new OpenSeadragon.Rect(position.x + (position.width - position.height) / 2, position.y - (position.width - position.height) / 2, position.height, position.width);
        }
        else {
            bounds = new OpenSeadragon.Rect(position.x, position.y, position.width, position.height);
        }
        const tileSourcesStrategy = TileSourceStrategyFactory.create(tile.tileSource);
        const tileSource = tileSourcesStrategy.getTileSource(tile.tileSource);
        this.viewer?.addTiledImage({
            tileSource: tileSource,
            fitBounds: bounds,
            degrees: this.rotation,
        });
    }
    createAndAppendCanvasGroups() {
        let index = 0;
        this.canvasGroups.canvasGroups.forEach((canvasGroup) => {
            const group = this.appendPageGroup();
            canvasGroup.tileSourceAndRects.forEach((tileSourceAndRect) => {
                this.createTile(tileSourceAndRect);
                this.createOverlay(group, tileSourceAndRect, index);
                index++;
            });
        });
    }
    appendPageGroup() {
        return this.svgNode.append('g').attr('class', 'page-group');
    }
    createOverlay(group, tile, i) {
        const position = tile.rect;
        const currentOverlay = this.createRectangle(group, position);
        // Make custom borders if current layout is two-paged
        if (this.viewerLayoutService.layout === ViewerLayout.TWO_PAGE) {
            this.applyCustomBorders(i, position, currentOverlay);
        }
        const currentOverlayNode = currentOverlay.node();
        this._overlays[i] = currentOverlayNode;
    }
    createCanvasGroups() {
        this.numberOfCanvases = this.tileSources.length;
        const canvasGroupStrategy = CanvasGroupStrategyFactory.create(this.viewerLayoutService.layout, this.config, this.viewingDirection, this.rotation);
        this.canvasGroups = canvasGroupStrategy.addAll(this.tileSources);
        this._currentNumberOfCanvasGroups.next(this.canvasGroups.length());
    }
    applyCustomBorders(i, position, currentOverlay) {
        if (i % 2 === 0 && i !== 0) {
            const noLeftStrokeStyle = Number(position.width * 2 + position.height) +
                ', ' +
                position.width * 2;
            currentOverlay.style('stroke-dasharray', noLeftStrokeStyle);
        }
        else if (i % 2 !== 0 && i !== 0) {
            const noRightStrokeStyle = position.width +
                ', ' +
                position.height +
                ', ' +
                Number(position.width * 2 + position.height);
            currentOverlay.style('stroke-dasharray', noRightStrokeStyle);
        }
    }
    createRectangle(group, position) {
        return group
            .append('rect')
            .attr('x', position.x)
            .attr('y', position.y)
            .attr('width', position.width)
            .attr('height', position.height)
            .attr('class', 'tile');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: CanvasService, deps: [{ token: i1.ViewerLayoutService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: CanvasService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: CanvasService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.ViewerLayoutService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9jYW52YXMtc2VydmljZS9jYW52YXMtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxhQUFhLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUd6RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7O0FBSTlFLE1BQU0sT0FBTyxhQUFhO0lBZXhCLFlBQW9CLG1CQUF3QztRQUF4Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBZGxELGlDQUE0QixHQUNwQyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLDZCQUF3QixHQUNoQyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLGlCQUFZLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLFdBQU0sR0FB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Q0FBQzthQUMvQixJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLENBQUM7OEdBNVNVLGFBQWE7a0hBQWIsYUFBYTs7MkZBQWIsYUFBYTtrQkFEekIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIE9wZW5TZWFkcmFnb24gZnJvbSAnb3BlbnNlYWRyYWdvbic7XG5pbXBvcnQgeyBWaWV3ZXIgfSBmcm9tICdvcGVuc2VhZHJhZ29uJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNaW1lVmlld2VyQ29uZmlnIH0gZnJvbSAnLi4vbWltZS12aWV3ZXItY29uZmlnJztcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWxzL21hbmlmZXN0JztcbmltcG9ydCB7IFZpZXdlckxheW91dCB9IGZyb20gJy4uL21vZGVscy92aWV3ZXItbGF5b3V0JztcbmltcG9ydCB7IFZpZXdpbmdEaXJlY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMvdmlld2luZy1kaXJlY3Rpb24nO1xuaW1wb3J0IHsgVmlld2VyTGF5b3V0U2VydmljZSB9IGZyb20gJy4uL3ZpZXdlci1sYXlvdXQtc2VydmljZS92aWV3ZXItbGF5b3V0LXNlcnZpY2UnO1xuaW1wb3J0IHsgVGlsZVNvdXJjZVN0cmF0ZWd5RmFjdG9yeSB9IGZyb20gJy4uL3ZpZXdlci1zZXJ2aWNlL3RpbGUtc291cmNlLXN0cmF0ZWd5LWZhY3RvcnknO1xuaW1wb3J0IHsgQ2FudmFzR3JvdXBzIH0gZnJvbSAnLi8uLi9tb2RlbHMvY2FudmFzLWdyb3Vwcyc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vLi4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuLy4uL21vZGVscy9yZWN0JztcbmltcG9ydCB7IENhbnZhc0dyb3VwU3RyYXRlZ3lGYWN0b3J5IH0gZnJvbSAnLi9jYW52YXMtZ3JvdXBzLXN0cmF0ZWd5LmZhY3RvcnknO1xuaW1wb3J0IHsgVGlsZVNvdXJjZUFuZFJlY3QgfSBmcm9tICcuL3RpbGUtc291cmNlLWFuZC1yZWN0Lm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhbnZhc1NlcnZpY2Uge1xuICBwcm90ZWN0ZWQgX2N1cnJlbnROdW1iZXJPZkNhbnZhc0dyb3VwczogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4gPVxuICAgIG5ldyBCZWhhdmlvclN1YmplY3QoMCk7XG4gIHByb3RlY3RlZCBfY3VycmVudENhbnZhc0dyb3VwSW5kZXg6IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+ID1cbiAgICBuZXcgQmVoYXZpb3JTdWJqZWN0KDApO1xuICBwcm90ZWN0ZWQgY2FudmFzR3JvdXBzOiBDYW52YXNHcm91cHMgPSBuZXcgQ2FudmFzR3JvdXBzKCk7XG4gIHByb3RlY3RlZCBfbnVtYmVyT2ZDYW52YXNlcyA9IDA7XG4gIHByaXZhdGUgY29uZmlnID0gbmV3IE1pbWVWaWV3ZXJDb25maWcoKTtcbiAgcHJpdmF0ZSB0aWxlU291cmNlczogYW55W10gPSBbXTtcbiAgcHJpdmF0ZSB2aWV3ZXI6IFZpZXdlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByb3RhdGlvbiA9IDA7XG4gIHByaXZhdGUgdmlld2luZ0RpcmVjdGlvbiA9IFZpZXdpbmdEaXJlY3Rpb24uTFRSO1xuICBwcml2YXRlIHN2Z05vZGU6IGFueTtcbiAgcHJpdmF0ZSBfb3ZlcmxheXM6IFNWR1JlY3RFbGVtZW50W10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdlckxheW91dFNlcnZpY2U6IFZpZXdlckxheW91dFNlcnZpY2UpIHt9XG5cbiAgZ2V0IG92ZXJsYXlzKCk6IFJlYWRvbmx5QXJyYXk8U1ZHUmVjdEVsZW1lbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5fb3ZlcmxheXM7XG4gIH1cblxuICBnZXQgb25DYW52YXNHcm91cEluZGV4Q2hhbmdlKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRDYW52YXNHcm91cEluZGV4XG4gICAgICAuYXNPYnNlcnZhYmxlKClcbiAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgZ2V0IG9uTnVtYmVyT2ZDYW52YXNHcm91cHNDaGFuZ2UoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudE51bWJlck9mQ2FudmFzR3JvdXBzXG4gICAgICAuYXNPYnNlcnZhYmxlKClcbiAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgc2V0IGN1cnJlbnRDYW52YXNHcm91cEluZGV4KGN1cnJlbnRDYW52YXNHcm91cEluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNXaXRoaW5Cb3VuZHMoY3VycmVudENhbnZhc0dyb3VwSW5kZXgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2N1cnJlbnRDYW52YXNHcm91cEluZGV4Lm5leHQoY3VycmVudENhbnZhc0dyb3VwSW5kZXgpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRDYW52YXNHcm91cEluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRDYW52YXNHcm91cEluZGV4LnZhbHVlO1xuICB9XG5cbiAgZ2V0IG51bWJlck9mQ2FudmFzZXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbnVtYmVyT2ZDYW52YXNlcztcbiAgfVxuXG4gIHNldCBudW1iZXJPZkNhbnZhc2VzKG51bWJlck9mQ2FudmFzZXM6IG51bWJlcikge1xuICAgIHRoaXMuX251bWJlck9mQ2FudmFzZXMgPSBudW1iZXJPZkNhbnZhc2VzO1xuICB9XG5cbiAgZ2V0IG51bWJlck9mQ2FudmFzR3JvdXBzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzR3JvdXBzLmxlbmd0aCgpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRDYW52YXNJbmRleCgpOiBudW1iZXIge1xuICAgIGNvbnN0IGNhbnZhc2VzID1cbiAgICAgIHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXBbdGhpcy5jdXJyZW50Q2FudmFzR3JvdXBJbmRleF07XG4gICAgcmV0dXJuIGNhbnZhc2VzICYmIGNhbnZhc2VzLmxlbmd0aCA+PSAxID8gY2FudmFzZXNbMF0gOiAwO1xuICB9XG5cbiAgc2V0Vmlld2VyKHZpZXdlcjogYW55KTogdm9pZCB7XG4gICAgdGhpcy52aWV3ZXIgPSB2aWV3ZXI7XG4gIH1cblxuICBzZXRDb25maWcoY29uZmlnOiBNaW1lVmlld2VyQ29uZmlnKTogdm9pZCB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH1cblxuICBzZXRTdmdOb2RlKHN2Z05vZGU6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuc3ZnTm9kZSA9IHN2Z05vZGU7XG4gIH1cblxuICBzZXRSb3RhdGlvbihyb3RhdGlvbjogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICB9XG5cbiAgc2V0Vmlld2luZ0RpcmVjdGlvbih2aWV3aW5nRGlyZWN0aW9uOiBWaWV3aW5nRGlyZWN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy52aWV3aW5nRGlyZWN0aW9uID0gdmlld2luZ0RpcmVjdGlvbjtcbiAgfVxuXG4gIGFkZFRpbGVTb3VyY2VzKHRpbGVTb3VyY2VzOiBSZXNvdXJjZVtdKTogdm9pZCB7XG4gICAgdGhpcy50aWxlU291cmNlcyA9IHRpbGVTb3VyY2VzO1xuICB9XG5cbiAgdXBkYXRlVmlld2VyKCk6IHZvaWQge1xuICAgIHRoaXMuY3JlYXRlQ2FudmFzR3JvdXBzKCk7XG4gICAgdGhpcy5jcmVhdGVBbmRBcHBlbmRDYW52YXNHcm91cHMoKTtcbiAgfVxuXG4gIGlzV2l0aGluQm91bmRzKGNhbnZhc0dyb3VwSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBjYW52YXNHcm91cEluZGV4ID4gLTEgJiYgY2FudmFzR3JvdXBJbmRleCA8PSB0aGlzLm51bWJlck9mQ2FudmFzR3JvdXBzIC0gMVxuICAgICk7XG4gIH1cblxuICBpc0N1cnJlbnRDYW52YXNHcm91cFZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuY3VycmVudENhbnZhc0dyb3VwSW5kZXgpO1xuICB9XG5cbiAgLy8gUmV0dXJucyAtMSBpZiBuZXh0IGNhbnZhcyBpbmRleCBpcyBvdXQgb2YgYm91bmRzXG4gIGdldE5leHRDYW52YXNHcm91cEluZGV4KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuY3VycmVudENhbnZhc0dyb3VwSW5kZXggKyAxKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRDYW52YXNHcm91cEluZGV4Kys7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudENhbnZhc0dyb3VwSW5kZXg7XG4gIH1cblxuICAvLyBSZXR1cm5zIC0xIGlmIHByZXZpb3VzIGNhbnZhcyBpbmRleCBpcyBvdXQgb2YgYm91bmRzXG4gIGdldFByZXZDYW52YXNHcm91cEluZGV4KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuY3VycmVudENhbnZhc0dyb3VwSW5kZXggLSAxKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRDYW52YXNHcm91cEluZGV4LS07XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudENhbnZhc0dyb3VwSW5kZXg7XG4gIH1cblxuICBjb25zdHJhaW5Ub1JhbmdlKGNhbnZhc0dyb3Vwc0luZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChjYW52YXNHcm91cHNJbmRleCA8IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoY2FudmFzR3JvdXBzSW5kZXggPj0gdGhpcy5udW1iZXJPZkNhbnZhc0dyb3VwcyAtIDEpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlck9mQ2FudmFzR3JvdXBzIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNhbnZhc0dyb3Vwc0luZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZpbmRDbG9zZXN0Q2FudmFzR3JvdXBJbmRleChwb2ludDogUG9pbnQpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbnZhc0dyb3Vwcy5maW5kQ2xvc2VzdEluZGV4KHBvaW50KTtcbiAgfVxuXG4gIGZpbmRDYW52YXNHcm91cEJ5Q2FudmFzSW5kZXgoY2FudmFzSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAuZmluZEluZGV4KGZ1bmN0aW9uIChcbiAgICAgIGNhbnZhc0ZvckNhbnZhc0dyb3VwOiBudW1iZXJbXSxcbiAgICApIHtcbiAgICAgIHJldHVybiBjYW52YXNGb3JDYW52YXNHcm91cC5pbmRleE9mKGNhbnZhc0luZGV4KSA+PSAwO1xuICAgIH0pO1xuICB9XG5cbiAgZmluZENhbnZhc0J5Q2FudmFzSW5kZXgoY2FudmFzSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAubGVuZ3RoID09PSAwXG4gICAgICA/IC0xXG4gICAgICA6IHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXBbY2FudmFzSW5kZXhdWzBdO1xuICB9XG5cbiAgZ2V0Q2FudmFzR3JvdXBMYWJlbChjYW52YXNHcm91cEluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChcbiAgICAgICF0aGlzLmNhbnZhc0dyb3Vwcy5jYW52YXNHcm91cHMgfHxcbiAgICAgIHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICByZXR1cm4gJzEnO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbnZhc0dyb3VwID1cbiAgICAgIHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXBbY2FudmFzR3JvdXBJbmRleF07XG4gICAgbGV0IGNhbnZhc0dyb3VwTGFiZWwgPSAnJyArIChjYW52YXNHcm91cFswXSArIDEpO1xuXG4gICAgaWYgKGNhbnZhc0dyb3VwLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNhbnZhc0dyb3VwTGFiZWwgPVxuICAgICAgICBjYW52YXNHcm91cExhYmVsICsgJy0nICsgKGNhbnZhc0dyb3VwW2NhbnZhc0dyb3VwLmxlbmd0aCAtIDFdICsgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbnZhc0dyb3VwTGFiZWw7XG4gIH1cblxuICBnZXRDYW52YXNlc1BlckNhbnZhc0dyb3VwKGNhbnZhc0luZGV4OiBudW1iZXIpOiBudW1iZXJbXSB7XG4gICAgcmV0dXJuICF0aGlzLmNhbnZhc0dyb3Vwcy5jYW52YXNHcm91cHNcbiAgICAgID8gWzBdXG4gICAgICA6IHRoaXMuY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXBbY2FudmFzSW5kZXhdO1xuICB9XG5cbiAgZ2V0Q2FudmFzUmVjdChjYW52YXNJbmRleDogbnVtYmVyKTogUmVjdCB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzR3JvdXBzLnRpbGVTb3VyY2VBbmRSZWN0c1tjYW52YXNJbmRleF0ucmVjdDtcbiAgfVxuXG4gIGdldEN1cnJlbnRDYW52YXNHcm91cFJlY3QoKTogUmVjdCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzR3JvdXBSZWN0KHRoaXMuY3VycmVudENhbnZhc0dyb3VwSW5kZXgpO1xuICB9XG5cbiAgZ2V0Q2FudmFzR3JvdXBSZWN0KGNhbnZhc0dyb3VwSW5kZXg6IG51bWJlcik6IFJlY3Qge1xuICAgIHJldHVybiB0aGlzLmNhbnZhc0dyb3Vwcy5nZXQoY2FudmFzR3JvdXBJbmRleCkucmVjdDtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmlld2VyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX292ZXJsYXlzID0gW107XG4gICAgdGhpcy5udW1iZXJPZkNhbnZhc2VzID0gMDtcbiAgICB0aGlzLl9jdXJyZW50Q2FudmFzR3JvdXBJbmRleC5uZXh0KDApO1xuICAgIHRoaXMuY2FudmFzR3JvdXBzID0gbmV3IENhbnZhc0dyb3VwcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVUaWxlKHRpbGU6IFRpbGVTb3VyY2VBbmRSZWN0KTogdm9pZCB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aWxlLnJlY3Q7XG4gICAgY29uc3Qgcm90YXRlZCA9IHRoaXMucm90YXRpb24gPT09IDkwIHx8IHRoaXMucm90YXRpb24gPT09IDI3MDtcblxuICAgIGxldCBib3VuZHM7XG5cbiAgICAvKiBCZWNhdXNlIGltYWdlIHNjYWxpbmcgaXMgcGVyZm9ybWVkIGJlZm9yZSByb3RhdGlvbixcbiAgICAgKiB3ZSBtdXN0IGludmVydCB3aWR0aCAmIGhlaWdodCBhbmQgdHJhbnNsYXRlIHBvc2l0aW9uIHNvIHRoYXQgdGlsZSByb3RhdGlvbiBlbmRzIHVwIGNvcnJlY3RcbiAgICAgKi9cbiAgICBpZiAocm90YXRlZCkge1xuICAgICAgYm91bmRzID0gbmV3IE9wZW5TZWFkcmFnb24uUmVjdChcbiAgICAgICAgcG9zaXRpb24ueCArIChwb3NpdGlvbi53aWR0aCAtIHBvc2l0aW9uLmhlaWdodCkgLyAyLFxuICAgICAgICBwb3NpdGlvbi55IC0gKHBvc2l0aW9uLndpZHRoIC0gcG9zaXRpb24uaGVpZ2h0KSAvIDIsXG4gICAgICAgIHBvc2l0aW9uLmhlaWdodCxcbiAgICAgICAgcG9zaXRpb24ud2lkdGgsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZHMgPSBuZXcgT3BlblNlYWRyYWdvbi5SZWN0KFxuICAgICAgICBwb3NpdGlvbi54LFxuICAgICAgICBwb3NpdGlvbi55LFxuICAgICAgICBwb3NpdGlvbi53aWR0aCxcbiAgICAgICAgcG9zaXRpb24uaGVpZ2h0LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0aWxlU291cmNlc1N0cmF0ZWd5ID0gVGlsZVNvdXJjZVN0cmF0ZWd5RmFjdG9yeS5jcmVhdGUoXG4gICAgICB0aWxlLnRpbGVTb3VyY2UsXG4gICAgKTtcbiAgICBjb25zdCB0aWxlU291cmNlID0gdGlsZVNvdXJjZXNTdHJhdGVneS5nZXRUaWxlU291cmNlKHRpbGUudGlsZVNvdXJjZSk7XG4gICAgdGhpcy52aWV3ZXI/LmFkZFRpbGVkSW1hZ2Uoe1xuICAgICAgdGlsZVNvdXJjZTogdGlsZVNvdXJjZSxcbiAgICAgIGZpdEJvdW5kczogYm91bmRzLFxuICAgICAgZGVncmVlczogdGhpcy5yb3RhdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQW5kQXBwZW5kQ2FudmFzR3JvdXBzKCk6IHZvaWQge1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgdGhpcy5jYW52YXNHcm91cHMuY2FudmFzR3JvdXBzLmZvckVhY2goKGNhbnZhc0dyb3VwKSA9PiB7XG4gICAgICBjb25zdCBncm91cDogYW55ID0gdGhpcy5hcHBlbmRQYWdlR3JvdXAoKTtcbiAgICAgIGNhbnZhc0dyb3VwLnRpbGVTb3VyY2VBbmRSZWN0cy5mb3JFYWNoKCh0aWxlU291cmNlQW5kUmVjdCkgPT4ge1xuICAgICAgICB0aGlzLmNyZWF0ZVRpbGUodGlsZVNvdXJjZUFuZFJlY3QpO1xuICAgICAgICB0aGlzLmNyZWF0ZU92ZXJsYXkoZ3JvdXAsIHRpbGVTb3VyY2VBbmRSZWN0LCBpbmRleCk7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXBwZW5kUGFnZUdyb3VwKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuc3ZnTm9kZS5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdwYWdlLWdyb3VwJyk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU92ZXJsYXkoZ3JvdXA6IGFueSwgdGlsZTogVGlsZVNvdXJjZUFuZFJlY3QsIGk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGlsZS5yZWN0O1xuICAgIGNvbnN0IGN1cnJlbnRPdmVybGF5ID0gdGhpcy5jcmVhdGVSZWN0YW5nbGUoZ3JvdXAsIHBvc2l0aW9uKTtcblxuICAgIC8vIE1ha2UgY3VzdG9tIGJvcmRlcnMgaWYgY3VycmVudCBsYXlvdXQgaXMgdHdvLXBhZ2VkXG4gICAgaWYgKHRoaXMudmlld2VyTGF5b3V0U2VydmljZS5sYXlvdXQgPT09IFZpZXdlckxheW91dC5UV09fUEFHRSkge1xuICAgICAgdGhpcy5hcHBseUN1c3RvbUJvcmRlcnMoaSwgcG9zaXRpb24sIGN1cnJlbnRPdmVybGF5KTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50T3ZlcmxheU5vZGU6IFNWR1JlY3RFbGVtZW50ID0gY3VycmVudE92ZXJsYXkubm9kZSgpO1xuICAgIHRoaXMuX292ZXJsYXlzW2ldID0gY3VycmVudE92ZXJsYXlOb2RlO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDYW52YXNHcm91cHMoKTogdm9pZCB7XG4gICAgdGhpcy5udW1iZXJPZkNhbnZhc2VzID0gdGhpcy50aWxlU291cmNlcy5sZW5ndGg7XG4gICAgY29uc3QgY2FudmFzR3JvdXBTdHJhdGVneSA9IENhbnZhc0dyb3VwU3RyYXRlZ3lGYWN0b3J5LmNyZWF0ZShcbiAgICAgIHRoaXMudmlld2VyTGF5b3V0U2VydmljZS5sYXlvdXQsXG4gICAgICB0aGlzLmNvbmZpZyxcbiAgICAgIHRoaXMudmlld2luZ0RpcmVjdGlvbixcbiAgICAgIHRoaXMucm90YXRpb24sXG4gICAgKTtcbiAgICB0aGlzLmNhbnZhc0dyb3VwcyA9IGNhbnZhc0dyb3VwU3RyYXRlZ3kuYWRkQWxsKHRoaXMudGlsZVNvdXJjZXMpO1xuICAgIHRoaXMuX2N1cnJlbnROdW1iZXJPZkNhbnZhc0dyb3Vwcy5uZXh0KHRoaXMuY2FudmFzR3JvdXBzLmxlbmd0aCgpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlDdXN0b21Cb3JkZXJzKFxuICAgIGk6IG51bWJlcixcbiAgICBwb3NpdGlvbjogYW55LFxuICAgIGN1cnJlbnRPdmVybGF5OiBhbnksXG4gICk6IHZvaWQge1xuICAgIGlmIChpICUgMiA9PT0gMCAmJiBpICE9PSAwKSB7XG4gICAgICBjb25zdCBub0xlZnRTdHJva2VTdHlsZSA9XG4gICAgICAgIE51bWJlcihwb3NpdGlvbi53aWR0aCAqIDIgKyBwb3NpdGlvbi5oZWlnaHQpICtcbiAgICAgICAgJywgJyArXG4gICAgICAgIHBvc2l0aW9uLndpZHRoICogMjtcbiAgICAgIGN1cnJlbnRPdmVybGF5LnN0eWxlKCdzdHJva2UtZGFzaGFycmF5Jywgbm9MZWZ0U3Ryb2tlU3R5bGUpO1xuICAgIH0gZWxzZSBpZiAoaSAlIDIgIT09IDAgJiYgaSAhPT0gMCkge1xuICAgICAgY29uc3Qgbm9SaWdodFN0cm9rZVN0eWxlID1cbiAgICAgICAgcG9zaXRpb24ud2lkdGggK1xuICAgICAgICAnLCAnICtcbiAgICAgICAgcG9zaXRpb24uaGVpZ2h0ICtcbiAgICAgICAgJywgJyArXG4gICAgICAgIE51bWJlcihwb3NpdGlvbi53aWR0aCAqIDIgKyBwb3NpdGlvbi5oZWlnaHQpO1xuICAgICAgY3VycmVudE92ZXJsYXkuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBub1JpZ2h0U3Ryb2tlU3R5bGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUmVjdGFuZ2xlKGdyb3VwOiBhbnksIHBvc2l0aW9uOiBSZWN0KTogYW55IHtcbiAgICByZXR1cm4gZ3JvdXBcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ3gnLCBwb3NpdGlvbi54KVxuICAgICAgLmF0dHIoJ3knLCBwb3NpdGlvbi55KVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcG9zaXRpb24ud2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgcG9zaXRpb24uaGVpZ2h0KVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RpbGUnKTtcbiAgfVxufVxuIl19