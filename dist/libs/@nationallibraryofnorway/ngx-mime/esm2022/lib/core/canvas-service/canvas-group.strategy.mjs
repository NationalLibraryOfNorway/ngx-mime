import { Rect } from './../models/rect';
import { CanvasGroups } from './../models/canvas-groups';
export class OneCanvasPerCanvasGroupStrategy {
    constructor() {
        this.addAll = (canvasRects) => {
            const canvasGroups = new CanvasGroups();
            canvasGroups.addRange(canvasRects);
            canvasGroups.canvasRects = canvasRects;
            for (let i = 0; i < canvasRects.length; i++) {
                canvasGroups.canvasesPerCanvasGroup.push([i]);
            }
            return canvasGroups;
        };
    }
}
export class TwoCanvasPerCanvasGroupStrategy {
    constructor() {
        this.addAll = (canvasRects) => {
            const canvasGroups = new CanvasGroups();
            // Single first page
            canvasGroups.add(canvasRects[0]);
            canvasGroups.canvasRects = canvasRects;
            canvasGroups.canvasesPerCanvasGroup.push([0]);
            for (let i = 1; i < canvasRects.length; i = i + 2) {
                if (i + 1 < canvasRects.length) {
                    // Paired pages
                    const thisRect = canvasRects[i];
                    const nextRect = canvasRects[i + 1];
                    const groupedRect = new Rect({
                        x: Math.min(thisRect.x, nextRect.x),
                        y: Math.min(thisRect.y, nextRect.y),
                        height: Math.max(thisRect.height, nextRect.height),
                        width: thisRect.width + nextRect.width,
                    });
                    canvasGroups.add(groupedRect);
                    canvasGroups.canvasesPerCanvasGroup.push([i, i + 1]);
                }
                else {
                    // Single last page, if applicable
                    canvasGroups.add(canvasRects[i]);
                    canvasGroups.canvasesPerCanvasGroup.push([i]);
                }
            }
            return canvasGroups;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLWdyb3VwLnN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbWltZS9zcmMvbGliL2NvcmUvY2FudmFzLXNlcnZpY2UvY2FudmFzLWdyb3VwLnN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFNekQsTUFBTSxPQUFPLCtCQUErQjtJQUE1QztRQUdFLFdBQU0sR0FBRyxDQUFDLFdBQW1CLEVBQUUsRUFBRTtZQUMvQixNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ3hDLFlBQVksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbkMsWUFBWSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDNUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEQsQ0FBQztZQUNELE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FBQTtBQUVELE1BQU0sT0FBTywrQkFBK0I7SUFBNUM7UUFHRSxXQUFNLEdBQUcsQ0FBQyxXQUFtQixFQUFFLEVBQUU7WUFDL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUN4QyxvQkFBb0I7WUFDcEIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxZQUFZLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUN2QyxZQUFZLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU5QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNsRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUMvQixlQUFlO29CQUNmLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDaEMsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUM7d0JBQzNCLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNuQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUM7d0JBQ2xELEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLO3FCQUN2QyxDQUFDLENBQUM7b0JBQ0gsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDOUIsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsQ0FBQztxQkFBTSxDQUFDO29CQUNOLGtDQUFrQztvQkFDbEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELENBQUM7WUFDSCxDQUFDO1lBQ0QsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4vLi4vbW9kZWxzL3JlY3QnO1xuaW1wb3J0IHsgQ2FudmFzR3JvdXBzIH0gZnJvbSAnLi8uLi9tb2RlbHMvY2FudmFzLWdyb3Vwcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWJzdHJhY3RDYW52YXNHcm91cFN0cmF0ZWd5IHtcbiAgYWRkQWxsKGNhbnZhc1JlY3RzOiBSZWN0W10pOiBDYW52YXNHcm91cHM7XG59XG5cbmV4cG9ydCBjbGFzcyBPbmVDYW52YXNQZXJDYW52YXNHcm91cFN0cmF0ZWd5XG4gIGltcGxlbWVudHMgQWJzdHJhY3RDYW52YXNHcm91cFN0cmF0ZWd5XG57XG4gIGFkZEFsbCA9IChjYW52YXNSZWN0czogUmVjdFtdKSA9PiB7XG4gICAgY29uc3QgY2FudmFzR3JvdXBzID0gbmV3IENhbnZhc0dyb3VwcygpO1xuICAgIGNhbnZhc0dyb3Vwcy5hZGRSYW5nZShjYW52YXNSZWN0cyk7XG4gICAgY2FudmFzR3JvdXBzLmNhbnZhc1JlY3RzID0gY2FudmFzUmVjdHM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW52YXNSZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAucHVzaChbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY2FudmFzR3JvdXBzO1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgVHdvQ2FudmFzUGVyQ2FudmFzR3JvdXBTdHJhdGVneVxuICBpbXBsZW1lbnRzIEFic3RyYWN0Q2FudmFzR3JvdXBTdHJhdGVneVxue1xuICBhZGRBbGwgPSAoY2FudmFzUmVjdHM6IFJlY3RbXSkgPT4ge1xuICAgIGNvbnN0IGNhbnZhc0dyb3VwcyA9IG5ldyBDYW52YXNHcm91cHMoKTtcbiAgICAvLyBTaW5nbGUgZmlyc3QgcGFnZVxuICAgIGNhbnZhc0dyb3Vwcy5hZGQoY2FudmFzUmVjdHNbMF0pO1xuICAgIGNhbnZhc0dyb3Vwcy5jYW52YXNSZWN0cyA9IGNhbnZhc1JlY3RzO1xuICAgIGNhbnZhc0dyb3Vwcy5jYW52YXNlc1BlckNhbnZhc0dyb3VwLnB1c2goWzBdKTtcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY2FudmFzUmVjdHMubGVuZ3RoOyBpID0gaSArIDIpIHtcbiAgICAgIGlmIChpICsgMSA8IGNhbnZhc1JlY3RzLmxlbmd0aCkge1xuICAgICAgICAvLyBQYWlyZWQgcGFnZXNcbiAgICAgICAgY29uc3QgdGhpc1JlY3QgPSBjYW52YXNSZWN0c1tpXTtcbiAgICAgICAgY29uc3QgbmV4dFJlY3QgPSBjYW52YXNSZWN0c1tpICsgMV07XG4gICAgICAgIGNvbnN0IGdyb3VwZWRSZWN0ID0gbmV3IFJlY3Qoe1xuICAgICAgICAgIHg6IE1hdGgubWluKHRoaXNSZWN0LngsIG5leHRSZWN0LngpLFxuICAgICAgICAgIHk6IE1hdGgubWluKHRoaXNSZWN0LnksIG5leHRSZWN0LnkpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgodGhpc1JlY3QuaGVpZ2h0LCBuZXh0UmVjdC5oZWlnaHQpLFxuICAgICAgICAgIHdpZHRoOiB0aGlzUmVjdC53aWR0aCArIG5leHRSZWN0LndpZHRoLFxuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzR3JvdXBzLmFkZChncm91cGVkUmVjdCk7XG4gICAgICAgIGNhbnZhc0dyb3Vwcy5jYW52YXNlc1BlckNhbnZhc0dyb3VwLnB1c2goW2ksIGkgKyAxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaW5nbGUgbGFzdCBwYWdlLCBpZiBhcHBsaWNhYmxlXG4gICAgICAgIGNhbnZhc0dyb3Vwcy5hZGQoY2FudmFzUmVjdHNbaV0pO1xuICAgICAgICBjYW52YXNHcm91cHMuY2FudmFzZXNQZXJDYW52YXNHcm91cC5wdXNoKFtpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW52YXNHcm91cHM7XG4gIH07XG59XG4iXX0=