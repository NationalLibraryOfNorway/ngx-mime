import { TwoPageCalculateCanvasGroupPositionStrategy } from '../canvas-group-position/two-page-calculate-page-position-strategy';
import { CanvasGroups } from '../models/canvas-groups';
import { Rect } from '../models/rect';
export class TwoCanvasPerCanvasGroupStrategy {
    constructor(config, viewingDirection, rotation) {
        this.config = config;
        this.viewingDirection = viewingDirection;
        this.rotation = rotation;
        this.positionStrategy = new TwoPageCalculateCanvasGroupPositionStrategy(this.config);
    }
    addAll(tileSources) {
        const canvasGroups = new CanvasGroups();
        // Add first single page
        this.addSinglePage(canvasGroups, tileSources[0], 0, new Rect());
        for (let i = 1; i < tileSources.length; i += 2) {
            if (this.hasNextPage(tileSources, i)) {
                this.addPairedPages(canvasGroups, tileSources, i);
            }
            else {
                this.addSinglePage(canvasGroups, tileSources[i], i, this.getLastRect(canvasGroups));
            }
        }
        return canvasGroups;
    }
    addSinglePage(canvasGroups, tileSource, index, previousRect) {
        const position = this.calculatePosition(tileSource, index, previousRect);
        const tileSourceAndRect = { tileSource, rect: position };
        const newCanvasGroup = {
            tileSourceAndRects: [tileSourceAndRect],
            rect: position,
        };
        canvasGroups.add(newCanvasGroup);
        canvasGroups.canvasesPerCanvasGroup.push([index]);
    }
    addPairedPages(canvasGroups, tileSources, index) {
        const previousCanvasGroup = this.getLastCanvasGroup(canvasGroups);
        const firstTileSourceAndRect = this.createTileSourceAndRect(tileSources[index], index, previousCanvasGroup.rect);
        const secondTileSourceAndRect = this.createTileSourceAndRect(tileSources[index + 1], index + 1, firstTileSourceAndRect.rect);
        const newCanvasGroup = {
            tileSourceAndRects: [firstTileSourceAndRect, secondTileSourceAndRect],
            rect: this.combineRects(firstTileSourceAndRect.rect, secondTileSourceAndRect.rect),
        };
        canvasGroups.add(newCanvasGroup);
        canvasGroups.canvasesPerCanvasGroup.push([index, index + 1]);
    }
    hasNextPage(tileSources, index) {
        return index + 1 < tileSources.length;
    }
    createTileSourceAndRect(tileSource, index, previousRect) {
        return {
            tileSource,
            rect: this.calculatePosition(tileSource, index, previousRect),
        };
    }
    calculatePosition(tileSource, index, previousRect) {
        return this.positionStrategy.calculateCanvasGroupPosition({
            canvasGroupIndex: index,
            canvasSource: tileSource,
            previousCanvasGroupPosition: previousRect,
            viewingDirection: this.viewingDirection,
        }, this.rotation);
    }
    getLastCanvasGroup(canvasGroups) {
        return canvasGroups.canvasGroups[canvasGroups.canvasGroups.length - 1];
    }
    getLastRect(canvasGroups) {
        const lastCanvasGroup = this.getLastCanvasGroup(canvasGroups);
        return lastCanvasGroup.rect;
    }
    combineRects(rect1, rect2) {
        return new Rect({
            x: Math.min(rect1.x, rect2.x),
            y: Math.min(rect1.y, rect2.y),
            height: Math.max(rect1.height, rect2.height),
            width: rect1.width + rect2.width,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,