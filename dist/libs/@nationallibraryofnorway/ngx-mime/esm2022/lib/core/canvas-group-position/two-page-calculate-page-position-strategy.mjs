import { ViewerOptions } from '../models/viewer-options';
import { ViewingDirection } from '../models/viewing-direction';
import { canvasRectFromCriteria } from './calculate-canvas-group-position-utils';
export class TwoPageCalculateCanvasGroupPositionStrategy {
    constructor(config) {
        this.config = config;
    }
    calculateCanvasGroupPosition(criteria, rotation = 0) {
        let x;
        if (!criteria.canvasGroupIndex) {
            // First page
            x = 0;
        }
        else if (criteria.canvasGroupIndex % 2) {
            // Even page numbers
            x =
                criteria.viewingDirection === ViewingDirection.LTR
                    ? this.calculateEvenLtrX(criteria)
                    : this.calculateEvenRtlX(criteria);
        }
        else {
            // Odd page numbers
            x =
                criteria.viewingDirection === ViewingDirection.LTR
                    ? this.calculateOddLtrX(criteria)
                    : this.calculateOddRtlX(criteria);
        }
        return canvasRectFromCriteria(rotation, criteria, x, this.config.ignorePhysicalScale);
    }
    calculateEvenLtrX(criteria) {
        return (criteria.previousCanvasGroupPosition.x +
            criteria.previousCanvasGroupPosition.width +
            ViewerOptions.overlays.canvasGroupMarginInDashboardView);
    }
    calculateOddLtrX(criteria) {
        return (criteria.previousCanvasGroupPosition.x +
            criteria.previousCanvasGroupPosition.width);
    }
    calculateEvenRtlX(criteria) {
        return (criteria.previousCanvasGroupPosition.x -
            criteria.canvasSource.width -
            ViewerOptions.overlays.canvasGroupMarginInDashboardView);
    }
    calculateOddRtlX(criteria) {
        return criteria.previousCanvasGroupPosition.x - criteria.canvasSource.width;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdvLXBhZ2UtY2FsY3VsYXRlLXBhZ2UtcG9zaXRpb24tc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9jYW52YXMtZ3JvdXAtcG9zaXRpb24vdHdvLXBhZ2UtY2FsY3VsYXRlLXBhZ2UtcG9zaXRpb24tc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSy9ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRWpGLE1BQU0sT0FBTywyQ0FBMkM7SUFHdEQsWUFBb0IsTUFBd0I7UUFBeEIsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7SUFBRyxDQUFDO0lBRWhELDRCQUE0QixDQUMxQixRQUFxQyxFQUNyQyxRQUFRLEdBQUcsQ0FBQztRQUVaLElBQUksQ0FBUyxDQUFDO1FBRWQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQy9CLGFBQWE7WUFDYixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1IsQ0FBQzthQUFNLElBQUksUUFBUSxDQUFDLGdCQUFnQixHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3pDLG9CQUFvQjtZQUNwQixDQUFDO2dCQUNDLFFBQVEsQ0FBQyxnQkFBZ0IsS0FBSyxnQkFBZ0IsQ0FBQyxHQUFHO29CQUNoRCxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQztvQkFDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QyxDQUFDO2FBQU0sQ0FBQztZQUNOLG1CQUFtQjtZQUNuQixDQUFDO2dCQUNDLFFBQVEsQ0FBQyxnQkFBZ0IsS0FBSyxnQkFBZ0IsQ0FBQyxHQUFHO29CQUNoRCxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztvQkFDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBRUQsT0FBTyxzQkFBc0IsQ0FDM0IsUUFBUSxFQUNSLFFBQVEsRUFDUixDQUFDLEVBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FDaEMsQ0FBQztJQUNKLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxRQUFxQztRQUM3RCxPQUFPLENBQ0wsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDdEMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLEtBQUs7WUFDMUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FDeEQsQ0FBQztJQUNKLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxRQUFxQztRQUM1RCxPQUFPLENBQ0wsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDdEMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FDM0MsQ0FBQztJQUNKLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxRQUFxQztRQUM3RCxPQUFPLENBQ0wsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDdEMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLO1lBQzNCLGFBQWEsQ0FBQyxRQUFRLENBQUMsZ0NBQWdDLENBQ3hELENBQUM7SUFDSixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsUUFBcUM7UUFDNUQsT0FBTyxRQUFRLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBQzlFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1pbWVWaWV3ZXJDb25maWcgfSBmcm9tICcuLi9taW1lLXZpZXdlci1jb25maWcnO1xuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4uL21vZGVscy9yZWN0JztcbmltcG9ydCB7IFZpZXdlck9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvdmlld2VyLW9wdGlvbnMnO1xuaW1wb3J0IHsgVmlld2luZ0RpcmVjdGlvbiB9IGZyb20gJy4uL21vZGVscy92aWV3aW5nLWRpcmVjdGlvbic7XG5pbXBvcnQge1xuICBDYWxjdWxhdGVDYW52YXNHcm91cFBvc2l0aW9uU3RyYXRlZ3ksXG4gIENhbnZhc0dyb3VwUG9zaXRpb25Dcml0ZXJpYSxcbn0gZnJvbSAnLi9jYWxjdWxhdGUtY2FudmFzLWdyb3VwLXBvc2l0aW9uLXN0cmF0ZWd5JztcbmltcG9ydCB7IGNhbnZhc1JlY3RGcm9tQ3JpdGVyaWEgfSBmcm9tICcuL2NhbGN1bGF0ZS1jYW52YXMtZ3JvdXAtcG9zaXRpb24tdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgVHdvUGFnZUNhbGN1bGF0ZUNhbnZhc0dyb3VwUG9zaXRpb25TdHJhdGVneVxuICBpbXBsZW1lbnRzIENhbGN1bGF0ZUNhbnZhc0dyb3VwUG9zaXRpb25TdHJhdGVneVxue1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogTWltZVZpZXdlckNvbmZpZykge31cblxuICBjYWxjdWxhdGVDYW52YXNHcm91cFBvc2l0aW9uKFxuICAgIGNyaXRlcmlhOiBDYW52YXNHcm91cFBvc2l0aW9uQ3JpdGVyaWEsXG4gICAgcm90YXRpb24gPSAwLFxuICApOiBSZWN0IHtcbiAgICBsZXQgeDogbnVtYmVyO1xuXG4gICAgaWYgKCFjcml0ZXJpYS5jYW52YXNHcm91cEluZGV4KSB7XG4gICAgICAvLyBGaXJzdCBwYWdlXG4gICAgICB4ID0gMDtcbiAgICB9IGVsc2UgaWYgKGNyaXRlcmlhLmNhbnZhc0dyb3VwSW5kZXggJSAyKSB7XG4gICAgICAvLyBFdmVuIHBhZ2UgbnVtYmVyc1xuICAgICAgeCA9XG4gICAgICAgIGNyaXRlcmlhLnZpZXdpbmdEaXJlY3Rpb24gPT09IFZpZXdpbmdEaXJlY3Rpb24uTFRSXG4gICAgICAgICAgPyB0aGlzLmNhbGN1bGF0ZUV2ZW5MdHJYKGNyaXRlcmlhKVxuICAgICAgICAgIDogdGhpcy5jYWxjdWxhdGVFdmVuUnRsWChjcml0ZXJpYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9kZCBwYWdlIG51bWJlcnNcbiAgICAgIHggPVxuICAgICAgICBjcml0ZXJpYS52aWV3aW5nRGlyZWN0aW9uID09PSBWaWV3aW5nRGlyZWN0aW9uLkxUUlxuICAgICAgICAgID8gdGhpcy5jYWxjdWxhdGVPZGRMdHJYKGNyaXRlcmlhKVxuICAgICAgICAgIDogdGhpcy5jYWxjdWxhdGVPZGRSdGxYKGNyaXRlcmlhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FudmFzUmVjdEZyb21Dcml0ZXJpYShcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgY3JpdGVyaWEsXG4gICAgICB4LFxuICAgICAgdGhpcy5jb25maWcuaWdub3JlUGh5c2ljYWxTY2FsZSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVFdmVuTHRyWChjcml0ZXJpYTogQ2FudmFzR3JvdXBQb3NpdGlvbkNyaXRlcmlhKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGNyaXRlcmlhLnByZXZpb3VzQ2FudmFzR3JvdXBQb3NpdGlvbi54ICtcbiAgICAgIGNyaXRlcmlhLnByZXZpb3VzQ2FudmFzR3JvdXBQb3NpdGlvbi53aWR0aCArXG4gICAgICBWaWV3ZXJPcHRpb25zLm92ZXJsYXlzLmNhbnZhc0dyb3VwTWFyZ2luSW5EYXNoYm9hcmRWaWV3XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlT2RkTHRyWChjcml0ZXJpYTogQ2FudmFzR3JvdXBQb3NpdGlvbkNyaXRlcmlhKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGNyaXRlcmlhLnByZXZpb3VzQ2FudmFzR3JvdXBQb3NpdGlvbi54ICtcbiAgICAgIGNyaXRlcmlhLnByZXZpb3VzQ2FudmFzR3JvdXBQb3NpdGlvbi53aWR0aFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUV2ZW5SdGxYKGNyaXRlcmlhOiBDYW52YXNHcm91cFBvc2l0aW9uQ3JpdGVyaWEpIHtcbiAgICByZXR1cm4gKFxuICAgICAgY3JpdGVyaWEucHJldmlvdXNDYW52YXNHcm91cFBvc2l0aW9uLnggLVxuICAgICAgY3JpdGVyaWEuY2FudmFzU291cmNlLndpZHRoIC1cbiAgICAgIFZpZXdlck9wdGlvbnMub3ZlcmxheXMuY2FudmFzR3JvdXBNYXJnaW5JbkRhc2hib2FyZFZpZXdcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVPZGRSdGxYKGNyaXRlcmlhOiBDYW52YXNHcm91cFBvc2l0aW9uQ3JpdGVyaWEpIHtcbiAgICByZXR1cm4gY3JpdGVyaWEucHJldmlvdXNDYW52YXNHcm91cFBvc2l0aW9uLnggLSBjcml0ZXJpYS5jYW52YXNTb3VyY2Uud2lkdGg7XG4gIH1cbn1cbiJdfQ==