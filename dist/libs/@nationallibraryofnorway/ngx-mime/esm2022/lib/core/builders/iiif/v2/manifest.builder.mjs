import { Manifest } from '../../../models/manifest';
import { BuilderUtils } from './builder-utils';
import { MetadataBuilder } from './metadata.builder';
import { SequenceBuilder } from './sequence.builder';
import { ServiceBuilder } from './service.builder';
import { StructureBuilder } from './structure.builder';
import { TileSourceBuilder } from './tile-source.builder';
export class ManifestBuilder {
    constructor(data) {
        this.data = data;
    }
    build() {
        const sequences = new SequenceBuilder(this.data.sequences).build();
        return new Manifest({
            context: BuilderUtils.extractContext(this.data),
            type: BuilderUtils.extracType(this.data),
            id: BuilderUtils.extractId(this.data),
            viewingDirection: BuilderUtils.extractViewingDirection(this.data),
            label: this.data.label,
            metadata: new MetadataBuilder(this.data.metadata).build(),
            license: this.data.license,
            logo: this.data.logo,
            attribution: this.data.attribution,
            service: new ServiceBuilder(this.data.service).build(),
            sequences: sequences,
            structures: new StructureBuilder(this.data.structures, sequences).build(),
            tileSource: new TileSourceBuilder(this.data.sequences).build(),
            viewingHint: this.data.viewingHint,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3QuYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LW1pbWUvc3JjL2xpYi9jb3JlL2J1aWxkZXJzL2lpaWYvdjIvbWFuaWZlc3QuYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFZLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQW9CLElBQVM7UUFBVCxTQUFJLEdBQUosSUFBSSxDQUFLO0lBQUcsQ0FBQztJQUVqQyxLQUFLO1FBQ0gsTUFBTSxTQUFTLEdBQWUsSUFBSSxlQUFlLENBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUNwQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBRVYsT0FBTyxJQUFJLFFBQVEsQ0FBQztZQUNsQixPQUFPLEVBQUUsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQy9DLElBQUksRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDeEMsRUFBRSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNyQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNqRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ3RCLFFBQVEsRUFBRSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUN6RCxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQzFCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDcEIsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztZQUNsQyxPQUFPLEVBQUUsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDdEQsU0FBUyxFQUFFLFNBQVM7WUFDcEIsVUFBVSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ3pFLFVBQVUsRUFBRSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQzlELFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7U0FDbkMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFuaWZlc3QsIFNlcXVlbmNlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL21hbmlmZXN0JztcbmltcG9ydCB7IEJ1aWxkZXJVdGlscyB9IGZyb20gJy4vYnVpbGRlci11dGlscyc7XG5pbXBvcnQgeyBNZXRhZGF0YUJ1aWxkZXIgfSBmcm9tICcuL21ldGFkYXRhLmJ1aWxkZXInO1xuaW1wb3J0IHsgU2VxdWVuY2VCdWlsZGVyIH0gZnJvbSAnLi9zZXF1ZW5jZS5idWlsZGVyJztcbmltcG9ydCB7IFNlcnZpY2VCdWlsZGVyIH0gZnJvbSAnLi9zZXJ2aWNlLmJ1aWxkZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlQnVpbGRlciB9IGZyb20gJy4vc3RydWN0dXJlLmJ1aWxkZXInO1xuaW1wb3J0IHsgVGlsZVNvdXJjZUJ1aWxkZXIgfSBmcm9tICcuL3RpbGUtc291cmNlLmJ1aWxkZXInO1xuXG5leHBvcnQgY2xhc3MgTWFuaWZlc3RCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRhOiBhbnkpIHt9XG5cbiAgYnVpbGQoKTogTWFuaWZlc3Qge1xuICAgIGNvbnN0IHNlcXVlbmNlczogU2VxdWVuY2VbXSA9IG5ldyBTZXF1ZW5jZUJ1aWxkZXIoXG4gICAgICB0aGlzLmRhdGEuc2VxdWVuY2VzLFxuICAgICkuYnVpbGQoKTtcblxuICAgIHJldHVybiBuZXcgTWFuaWZlc3Qoe1xuICAgICAgY29udGV4dDogQnVpbGRlclV0aWxzLmV4dHJhY3RDb250ZXh0KHRoaXMuZGF0YSksXG4gICAgICB0eXBlOiBCdWlsZGVyVXRpbHMuZXh0cmFjVHlwZSh0aGlzLmRhdGEpLFxuICAgICAgaWQ6IEJ1aWxkZXJVdGlscy5leHRyYWN0SWQodGhpcy5kYXRhKSxcbiAgICAgIHZpZXdpbmdEaXJlY3Rpb246IEJ1aWxkZXJVdGlscy5leHRyYWN0Vmlld2luZ0RpcmVjdGlvbih0aGlzLmRhdGEpLFxuICAgICAgbGFiZWw6IHRoaXMuZGF0YS5sYWJlbCxcbiAgICAgIG1ldGFkYXRhOiBuZXcgTWV0YWRhdGFCdWlsZGVyKHRoaXMuZGF0YS5tZXRhZGF0YSkuYnVpbGQoKSxcbiAgICAgIGxpY2Vuc2U6IHRoaXMuZGF0YS5saWNlbnNlLFxuICAgICAgbG9nbzogdGhpcy5kYXRhLmxvZ28sXG4gICAgICBhdHRyaWJ1dGlvbjogdGhpcy5kYXRhLmF0dHJpYnV0aW9uLFxuICAgICAgc2VydmljZTogbmV3IFNlcnZpY2VCdWlsZGVyKHRoaXMuZGF0YS5zZXJ2aWNlKS5idWlsZCgpLFxuICAgICAgc2VxdWVuY2VzOiBzZXF1ZW5jZXMsXG4gICAgICBzdHJ1Y3R1cmVzOiBuZXcgU3RydWN0dXJlQnVpbGRlcih0aGlzLmRhdGEuc3RydWN0dXJlcywgc2VxdWVuY2VzKS5idWlsZCgpLFxuICAgICAgdGlsZVNvdXJjZTogbmV3IFRpbGVTb3VyY2VCdWlsZGVyKHRoaXMuZGF0YS5zZXF1ZW5jZXMpLmJ1aWxkKCksXG4gICAgICB2aWV3aW5nSGludDogdGhpcy5kYXRhLnZpZXdpbmdIaW50LFxuICAgIH0pO1xuICB9XG59XG4iXX0=