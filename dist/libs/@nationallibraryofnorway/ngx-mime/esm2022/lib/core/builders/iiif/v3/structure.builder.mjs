import { Structure } from '../../../models/manifest';
import { BuilderUtils } from './builder-utils';
export class StructureBuilder {
    constructor(structures, sequences) {
        this.structures = structures;
        this.sequences = sequences;
    }
    build() {
        const structures = [];
        if (this.structures) {
            for (let i = 0; i < this.structures.length; i++) {
                const structure = this.structures[i];
                structures.push(new Structure({
                    id: BuilderUtils.extractId(structure),
                    type: BuilderUtils.extracType(structure),
                    label: BuilderUtils.extractLanguageValue(structure.label),
                    canvases: structure.items,
                    canvasIndex: BuilderUtils.findCanvasIndex(structure.items, this.sequences),
                }));
            }
        }
        return structures;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9idWlsZGVycy9paWlmL3YzL3N0cnVjdHVyZS5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUFvQixVQUFpQixFQUFVLFNBQXFCO1FBQWhELGVBQVUsR0FBVixVQUFVLENBQU87UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFZO0lBQUcsQ0FBQztJQUV4RSxLQUFLO1FBQ0gsTUFBTSxVQUFVLEdBQWdCLEVBQUUsQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDaEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsVUFBVSxDQUFDLElBQUksQ0FDYixJQUFJLFNBQVMsQ0FBQztvQkFDWixFQUFFLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7b0JBQ3JDLElBQUksRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztvQkFDeEMsS0FBSyxFQUFFLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO29CQUN6RCxRQUFRLEVBQUUsU0FBUyxDQUFDLEtBQUs7b0JBQ3pCLFdBQVcsRUFBRSxZQUFZLENBQUMsZUFBZSxDQUN2QyxTQUFTLENBQUMsS0FBSyxFQUNmLElBQUksQ0FBQyxTQUFTLENBQ2Y7aUJBQ0YsQ0FBQyxDQUNILENBQUM7WUFDSixDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcXVlbmNlLCBTdHJ1Y3R1cmUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvbWFuaWZlc3QnO1xuaW1wb3J0IHsgQnVpbGRlclV0aWxzIH0gZnJvbSAnLi9idWlsZGVyLXV0aWxzJztcblxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZUJ1aWxkZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cnVjdHVyZXM6IGFueVtdLCBwcml2YXRlIHNlcXVlbmNlczogU2VxdWVuY2VbXSkge31cblxuICBidWlsZCgpOiBTdHJ1Y3R1cmVbXSB7XG4gICAgY29uc3Qgc3RydWN0dXJlczogU3RydWN0dXJlW10gPSBbXTtcbiAgICBpZiAodGhpcy5zdHJ1Y3R1cmVzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RydWN0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdHJ1Y3R1cmUgPSB0aGlzLnN0cnVjdHVyZXNbaV07XG4gICAgICAgIHN0cnVjdHVyZXMucHVzaChcbiAgICAgICAgICBuZXcgU3RydWN0dXJlKHtcbiAgICAgICAgICAgIGlkOiBCdWlsZGVyVXRpbHMuZXh0cmFjdElkKHN0cnVjdHVyZSksXG4gICAgICAgICAgICB0eXBlOiBCdWlsZGVyVXRpbHMuZXh0cmFjVHlwZShzdHJ1Y3R1cmUpLFxuICAgICAgICAgICAgbGFiZWw6IEJ1aWxkZXJVdGlscy5leHRyYWN0TGFuZ3VhZ2VWYWx1ZShzdHJ1Y3R1cmUubGFiZWwpLFxuICAgICAgICAgICAgY2FudmFzZXM6IHN0cnVjdHVyZS5pdGVtcyxcbiAgICAgICAgICAgIGNhbnZhc0luZGV4OiBCdWlsZGVyVXRpbHMuZmluZENhbnZhc0luZGV4KFxuICAgICAgICAgICAgICBzdHJ1Y3R1cmUuaXRlbXMsXG4gICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VzXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHJ1Y3R1cmVzO1xuICB9XG59XG4iXX0=