import { Structure } from '../../../models/manifest';
import { BuilderUtils } from './builder-utils';
export class StructureBuilder {
    constructor(structures, sequences) {
        this.structures = structures;
        this.sequences = sequences;
    }
    build() {
        const structures = [];
        if (this.structures) {
            for (let i = 0; i < this.structures.length; i++) {
                const structure = this.structures[i];
                structures.push(new Structure({
                    id: BuilderUtils.extractId(structure),
                    type: BuilderUtils.extracType(structure),
                    label: BuilderUtils.extractLanguageValue(structure.label),
                    canvases: structure.items,
                    canvasIndex: BuilderUtils.findCanvasIndex(structure.items, this.sequences),
                }));
            }
        }
        return structures;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1taW1lL3NyYy9saWIvY29yZS9idWlsZGVycy9paWlmL3YzL3N0cnVjdHVyZS5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUNVLFVBQWlCLEVBQ2pCLFNBQXFCO1FBRHJCLGVBQVUsR0FBVixVQUFVLENBQU87UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBWTtJQUM1QixDQUFDO0lBRUosS0FBSztRQUNILE1BQU0sVUFBVSxHQUFnQixFQUFFLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ2hELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLFVBQVUsQ0FBQyxJQUFJLENBQ2IsSUFBSSxTQUFTLENBQUM7b0JBQ1osRUFBRSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO29CQUNyQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7b0JBQ3hDLEtBQUssRUFBRSxZQUFZLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztvQkFDekQsUUFBUSxFQUFFLFNBQVMsQ0FBQyxLQUFLO29CQUN6QixXQUFXLEVBQUUsWUFBWSxDQUFDLGVBQWUsQ0FDdkMsU0FBUyxDQUFDLEtBQUssRUFDZixJQUFJLENBQUMsU0FBUyxDQUNmO2lCQUNGLENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXF1ZW5jZSwgU3RydWN0dXJlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL21hbmlmZXN0JztcbmltcG9ydCB7IEJ1aWxkZXJVdGlscyB9IGZyb20gJy4vYnVpbGRlci11dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzdHJ1Y3R1cmVzOiBhbnlbXSxcbiAgICBwcml2YXRlIHNlcXVlbmNlczogU2VxdWVuY2VbXSxcbiAgKSB7fVxuXG4gIGJ1aWxkKCk6IFN0cnVjdHVyZVtdIHtcbiAgICBjb25zdCBzdHJ1Y3R1cmVzOiBTdHJ1Y3R1cmVbXSA9IFtdO1xuICAgIGlmICh0aGlzLnN0cnVjdHVyZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdHJ1Y3R1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdHVyZSA9IHRoaXMuc3RydWN0dXJlc1tpXTtcbiAgICAgICAgc3RydWN0dXJlcy5wdXNoKFxuICAgICAgICAgIG5ldyBTdHJ1Y3R1cmUoe1xuICAgICAgICAgICAgaWQ6IEJ1aWxkZXJVdGlscy5leHRyYWN0SWQoc3RydWN0dXJlKSxcbiAgICAgICAgICAgIHR5cGU6IEJ1aWxkZXJVdGlscy5leHRyYWNUeXBlKHN0cnVjdHVyZSksXG4gICAgICAgICAgICBsYWJlbDogQnVpbGRlclV0aWxzLmV4dHJhY3RMYW5ndWFnZVZhbHVlKHN0cnVjdHVyZS5sYWJlbCksXG4gICAgICAgICAgICBjYW52YXNlczogc3RydWN0dXJlLml0ZW1zLFxuICAgICAgICAgICAgY2FudmFzSW5kZXg6IEJ1aWxkZXJVdGlscy5maW5kQ2FudmFzSW5kZXgoXG4gICAgICAgICAgICAgIHN0cnVjdHVyZS5pdGVtcyxcbiAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZXMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RydWN0dXJlcztcbiAgfVxufVxuIl19