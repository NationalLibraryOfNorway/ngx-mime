import { animate, state, style, transition, trigger, } from '@angular/animations';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, ViewChild, ViewContainerRef, } from '@angular/core';
import { Subscription } from 'rxjs';
import { ManifestUtils } from '../../core/iiif-manifest-service/iiif-manifest-utils';
import { MimeDomHelper } from '../../core/mime-dom-helper';
import { ViewerOptions } from '../../core/models/viewer-options';
import { HelpDialogService } from '../../help-dialog/help-dialog.service';
import { InformationDialogService } from '../../information-dialog/information-dialog.service';
import { ViewDialogService } from '../../view-dialog/view-dialog.service';
import { ContentSearchDialogService } from './../../content-search-dialog/content-search-dialog.service';
import { FullscreenService } from './../../core/fullscreen-service/fullscreen.service';
import { IiifManifestService } from './../../core/iiif-manifest-service/iiif-manifest-service';
import { MimeViewerIntl } from './../../core/intl';
import * as i0 from "@angular/core";
import * as i1 from "./../../core/intl";
import * as i2 from "../../information-dialog/information-dialog.service";
import * as i3 from "./../../content-search-dialog/content-search-dialog.service";
import * as i4 from "../../view-dialog/view-dialog.service";
import * as i5 from "../../help-dialog/help-dialog.service";
import * as i6 from "./../../core/iiif-manifest-service/iiif-manifest-service";
import * as i7 from "./../../core/fullscreen-service/fullscreen.service";
import * as i8 from "../../core/mime-dom-helper";
import * as i9 from "@angular/common";
import * as i10 from "@angular/material/toolbar";
import * as i11 from "@angular/material/button";
import * as i12 from "@angular/material/icon";
import * as i13 from "@angular/material/tooltip";
export class ViewerHeaderComponent {
    constructor(intl, changeDetectorRef, informationDialogService, contentSearchDialogService, viewDialogService, helpDialogService, iiifManifestService, fullscreenService, mimeDomHelper) {
        this.intl = intl;
        this.changeDetectorRef = changeDetectorRef;
        this.informationDialogService = informationDialogService;
        this.contentSearchDialogService = contentSearchDialogService;
        this.viewDialogService = viewDialogService;
        this.helpDialogService = helpDialogService;
        this.iiifManifestService = iiifManifestService;
        this.fullscreenService = fullscreenService;
        this.mimeDomHelper = mimeDomHelper;
        this.manifest = null;
        this.state = 'hide';
        this.isContentSearchEnabled = false;
        this.isFullscreenEnabled = false;
        this.isInFullscreen = false;
        this.fullscreenLabel = '';
        this.isPagedManifest = false;
        this.hasRecognizedTextContent = false;
        this.subscriptions = new Subscription();
    }
    get headerState() {
        return this.state;
    }
    ngOnInit() {
        this.isFullscreenEnabled = this.fullscreenService.isEnabled();
        this.subscriptions.add(this.intl.changes.subscribe(() => this.changeDetectorRef.markForCheck()));
        this.subscriptions.add(this.fullscreenService.onChange.subscribe(() => this.onFullscreenChange()));
        this.subscriptions.add(this.iiifManifestService.currentManifest.subscribe((manifest) => {
            this.manifest = manifest;
            this.isContentSearchEnabled =
                manifest && manifest.service ? true : false;
            this.isPagedManifest = manifest
                ? ManifestUtils.isManifestPaged(manifest)
                : false;
            this.hasRecognizedTextContent = manifest
                ? ManifestUtils.hasRecognizedTextContent(manifest)
                : false;
            this.changeDetectorRef.detectChanges();
        }));
        this.onFullscreenChange();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    toggleView() {
        this.informationDialogService.close();
        this.contentSearchDialogService.close();
        this.helpDialogService.close();
        this.viewDialogService.toggle();
    }
    toggleInformationDialog() {
        this.viewDialogService.close();
        this.contentSearchDialogService.close();
        this.helpDialogService.close();
        this.informationDialogService.toggle();
    }
    toggleSearch() {
        this.viewDialogService.close();
        this.informationDialogService.close();
        this.helpDialogService.close();
        this.contentSearchDialogService.toggle();
    }
    toggleHelp() {
        this.viewDialogService.close();
        this.informationDialogService.close();
        this.contentSearchDialogService.close();
        this.helpDialogService.toggle();
    }
    toggleFullscreen() {
        return this.mimeDomHelper.toggleFullscreen();
    }
    isInFullScreen() {
        return this.fullscreenService.isFullscreen();
    }
    onFullscreenChange() {
        this.isInFullscreen = this.fullscreenService.isFullscreen();
        this.fullscreenLabel = this.isInFullscreen
            ? this.intl.exitFullScreenLabel
            : this.intl.fullScreenLabel;
        this.changeDetectorRef.detectChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: ViewerHeaderComponent, deps: [{ token: i1.MimeViewerIntl }, { token: i0.ChangeDetectorRef }, { token: i2.InformationDialogService }, { token: i3.ContentSearchDialogService }, { token: i4.ViewDialogService }, { token: i5.HelpDialogService }, { token: i6.IiifManifestService }, { token: i7.FullscreenService }, { token: i8.MimeDomHelper }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.1.0", type: ViewerHeaderComponent, selector: "mime-viewer-header", host: { properties: { "@headerState": "this.headerState" } }, viewQueries: [{ propertyName: "mimeHeaderBefore", first: true, predicate: ["mimeHeaderBefore"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "mimeHeaderAfter", first: true, predicate: ["mimeHeaderAfter"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "viewMenu", first: true, predicate: ["viewMenu"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<mat-toolbar>\n  <ng-template #mimeHeaderBefore></ng-template>\n  <div\n    *ngIf=\"manifest\"\n    data-testid=\"ngx-mime-manifest-label\"\n    class=\"label w-full\"\n    [matTooltip]=\"manifest.label\"\n    >{{ manifest.label }}</div\n  >\n  <button\n    *ngIf=\"isPagedManifest || hasRecognizedTextContent\"\n    data-testid=\"ngx-mime-view-menu-button\"\n    #viewMenu\n    mat-icon-button\n    [attr.aria-label]=\"intl.layoutMenuLabel\"\n    [matTooltip]=\"intl.layoutMenuLabel\"\n    (click)=\"toggleView()\"\n    ><mat-icon aria-hidden=\"true\">view_module</mat-icon></button\n  >\n  <button\n    data-testid=\"ngx-mimeInformationDialogButton\"\n    mat-icon-button\n    [attr.aria-label]=\"intl.informationLabel\"\n    [matTooltip]=\"intl.informationLabel\"\n    (click)=\"toggleInformationDialog()\"\n  >\n    <mat-icon aria-hidden=\"true\">list</mat-icon>\n  </button>\n  <button\n    data-testid=\"ngx-mimeContentSearchDialogButton\"\n    *ngIf=\"isContentSearchEnabled\"\n    mat-icon-button\n    [attr.aria-label]=\"intl.searchLabel\"\n    [matTooltip]=\"intl.searchLabel\"\n    (click)=\"toggleSearch()\"\n  >\n    <mat-icon aria-hidden=\"true\">search</mat-icon>\n  </button>\n  <button\n    data-testid=\"ngx-mimeHelpDialogButton\"\n    mat-icon-button\n    [attr.aria-label]=\"intl.help.helpLabel\"\n    [matTooltip]=\"intl.help.helpLabel\"\n    (click)=\"toggleHelp()\"\n  >\n    <mat-icon aria-hidden=\"true\">help</mat-icon>\n  </button>\n\n  <button\n    data-testid=\"ngx-mimeFullscreenButton\"\n    *ngIf=\"isFullscreenEnabled\"\n    mat-icon-button\n    [attr.aria-label]=\"fullscreenLabel\"\n    [matTooltip]=\"fullscreenLabel\"\n    (click)=\"toggleFullscreen()\"\n  >\n    <mat-icon *ngIf=\"isInFullScreen\" aria-hidden=\"true\"\n      >fullscreen_exit</mat-icon\n    >\n    <mat-icon *ngIf=\"!isInFullScreen\" aria-hidden=\"true\">fullscreen</mat-icon>\n  </button>\n  <ng-template #mimeHeaderAfter></ng-template>\n</mat-toolbar>\n", styles: [":host{max-height:64px}.label{font-size:17px;overflow:hidden;text-overflow:ellipsis}\n"], dependencies: [{ kind: "directive", type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i10.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "component", type: i11.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "component", type: i12.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i13.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }], animations: [
            trigger('headerState', [
                state('hide', style({
                    transform: 'translate(0, -100%)',
                })),
                state('show', style({
                    transform: 'translate(0px, 0px)',
                })),
                transition('hide => show', animate(ViewerOptions.transitions.toolbarsEaseInTime + 'ms ease-in')),
                transition('show => hide', animate(ViewerOptions.transitions.toolbarsEaseOutTime + 'ms ease-out')),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: ViewerHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mime-viewer-header', changeDetection: ChangeDetectionStrategy.Default, animations: [
                        trigger('headerState', [
                            state('hide', style({
                                transform: 'translate(0, -100%)',
                            })),
                            state('show', style({
                                transform: 'translate(0px, 0px)',
                            })),
                            transition('hide => show', animate(ViewerOptions.transitions.toolbarsEaseInTime + 'ms ease-in')),
                            transition('show => hide', animate(ViewerOptions.transitions.toolbarsEaseOutTime + 'ms ease-out')),
                        ]),
                    ], template: "<mat-toolbar>\n  <ng-template #mimeHeaderBefore></ng-template>\n  <div\n    *ngIf=\"manifest\"\n    data-testid=\"ngx-mime-manifest-label\"\n    class=\"label w-full\"\n    [matTooltip]=\"manifest.label\"\n    >{{ manifest.label }}</div\n  >\n  <button\n    *ngIf=\"isPagedManifest || hasRecognizedTextContent\"\n    data-testid=\"ngx-mime-view-menu-button\"\n    #viewMenu\n    mat-icon-button\n    [attr.aria-label]=\"intl.layoutMenuLabel\"\n    [matTooltip]=\"intl.layoutMenuLabel\"\n    (click)=\"toggleView()\"\n    ><mat-icon aria-hidden=\"true\">view_module</mat-icon></button\n  >\n  <button\n    data-testid=\"ngx-mimeInformationDialogButton\"\n    mat-icon-button\n    [attr.aria-label]=\"intl.informationLabel\"\n    [matTooltip]=\"intl.informationLabel\"\n    (click)=\"toggleInformationDialog()\"\n  >\n    <mat-icon aria-hidden=\"true\">list</mat-icon>\n  </button>\n  <button\n    data-testid=\"ngx-mimeContentSearchDialogButton\"\n    *ngIf=\"isContentSearchEnabled\"\n    mat-icon-button\n    [attr.aria-label]=\"intl.searchLabel\"\n    [matTooltip]=\"intl.searchLabel\"\n    (click)=\"toggleSearch()\"\n  >\n    <mat-icon aria-hidden=\"true\">search</mat-icon>\n  </button>\n  <button\n    data-testid=\"ngx-mimeHelpDialogButton\"\n    mat-icon-button\n    [attr.aria-label]=\"intl.help.helpLabel\"\n    [matTooltip]=\"intl.help.helpLabel\"\n    (click)=\"toggleHelp()\"\n  >\n    <mat-icon aria-hidden=\"true\">help</mat-icon>\n  </button>\n\n  <button\n    data-testid=\"ngx-mimeFullscreenButton\"\n    *ngIf=\"isFullscreenEnabled\"\n    mat-icon-button\n    [attr.aria-label]=\"fullscreenLabel\"\n    [matTooltip]=\"fullscreenLabel\"\n    (click)=\"toggleFullscreen()\"\n  >\n    <mat-icon *ngIf=\"isInFullScreen\" aria-hidden=\"true\"\n      >fullscreen_exit</mat-icon\n    >\n    <mat-icon *ngIf=\"!isInFullScreen\" aria-hidden=\"true\">fullscreen</mat-icon>\n  </button>\n  <ng-template #mimeHeaderAfter></ng-template>\n</mat-toolbar>\n", styles: [":host{max-height:64px}.label{font-size:17px;overflow:hidden;text-overflow:ellipsis}\n"] }]
        }], ctorParameters: () => [{ type: i1.MimeViewerIntl }, { type: i0.ChangeDetectorRef }, { type: i2.InformationDialogService }, { type: i3.ContentSearchDialogService }, { type: i4.ViewDialogService }, { type: i5.HelpDialogService }, { type: i6.IiifManifestService }, { type: i7.FullscreenService }, { type: i8.MimeDomHelper }], propDecorators: { mimeHeaderBefore: [{
                type: ViewChild,
                args: ['mimeHeaderBefore', { read: ViewContainerRef, static: true }]
            }], mimeHeaderAfter: [{
                type: ViewChild,
                args: ['mimeHeaderAfter', { read: ViewContainerRef, static: true }]
            }], viewMenu: [{
                type: ViewChild,
                args: ['viewMenu', { read: ElementRef, static: true }]
            }], headerState: [{
                type: HostBinding,
                args: ['@headerState']
            }] } });
//# sourceMappingURL=data:application/json;base64,